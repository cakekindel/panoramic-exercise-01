// This file was generated by docs-search
window.DocsSearchTypeIndex["69187127"] = {"tag":"Just","value":[{"comments":"Converts a `Json` value to a JSON string.\nThe first `Int` argument specifies the amount of white space characters to use as indentation.\nThis number is capped at 10 (if it is greater, the value is just 10). Values less than 1 indicate that no space should be used.\n","hashAnchor":"v","info":{"tag":"value","value":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","annotation":null,"contents":[["Data","Argonaut","Core"],"Json"]}]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"String"]}]}]}},"moduleName":"Data.Argonaut.Core","name":"stringifyWithIndent","packageInfo":{"tag":"package","value":"argonaut-core-7.0.0"},"score":0,"sourceSpan":{"end":{"column":60,"line":246},"name":".spago/p/argonaut-core-7.0.0/src/Data/Argonaut/Core.purs","start":{"column":1,"line":246}}},{"comments":"Constructs a `Json` object value containing only the provided key and value\n","hashAnchor":"v","info":{"tag":"value","value":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"String"]}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","annotation":null,"contents":[["Data","Argonaut","Core"],"Json"]}]},{"tag":"TypeConstructor","annotation":null,"contents":[["Data","Argonaut","Core"],"Json"]}]}]}},"moduleName":"Data.Argonaut.Core","name":"jsonSingletonObject","packageInfo":{"tag":"package","value":"argonaut-core-7.0.0"},"score":0,"sourceSpan":{"end":{"column":46,"line":236},"name":".spago/p/argonaut-core-7.0.0/src/Data/Argonaut/Core.purs","start":{"column":1,"line":236}}},{"comments":"Raise an Int to the power of another Int.\n","hashAnchor":"v","info":{"tag":"value","value":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Int"]}]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Int"]}]}]}},"moduleName":"Data.Int","name":"pow","packageInfo":{"tag":"package","value":"integers-6.0.0"},"score":0,"sourceSpan":{"end":{"column":40,"line":248},"name":".spago/p/integers-6.0.0/src/Data/Int.purs","start":{"column":1,"line":248}}},{"comments":"The `rem` function provides the remainder after _truncating_ integer\ndivision (see the documentation for the `EuclideanRing` class). It is\nidentical to `mod` in the `EuclideanRing Int` instance if the dividend is\npositive, but will be slightly different if the dividend is negative. For\nexample:\n\n```purescript\nmod 2 3 == 2\nrem 2 3 == 2\n\nmod (-2) 3 == 1\nrem (-2) 3 == (-2)\n\nmod 2 (-3) == 2\nrem 2 (-3) == 2\n```\n","hashAnchor":"v","info":{"tag":"value","value":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Int"]}]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Int"]}]}]}},"moduleName":"Data.Int","name":"rem","packageInfo":{"tag":"package","value":"integers-6.0.0"},"score":0,"sourceSpan":{"end":{"column":40,"line":245},"name":".spago/p/integers-6.0.0/src/Data/Int.purs","start":{"column":1,"line":245}}},{"comments":"The `quot` function provides _truncating_ integer division (see the\ndocumentation for the `EuclideanRing` class). It is identical to `div` in\nthe `EuclideanRing Int` instance if the dividend is positive, but will be\nslightly different if the dividend is negative. For example:\n\n```purescript\ndiv 2 3 == 0\nquot 2 3 == 0\n\ndiv (-2) 3 == (-1)\nquot (-2) 3 == 0\n\ndiv 2 (-3) == 0\nquot 2 (-3) == 0\n```\n","hashAnchor":"v","info":{"tag":"value","value":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Int"]}]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Int"]}]}]}},"moduleName":"Data.Int","name":"quot","packageInfo":{"tag":"package","value":"integers-6.0.0"},"score":0,"sourceSpan":{"end":{"column":41,"line":227},"name":".spago/p/integers-6.0.0/src/Data/Int.purs","start":{"column":1,"line":227}}},{"hashAnchor":"v","info":{"tag":"value","value":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","annotation":null,"contents":[["Data","Int"],"Radix"]}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Int"]}]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"String"]}]}]}},"moduleName":"Data.Int","name":"toStringAs","packageInfo":{"tag":"package","value":"integers-6.0.0"},"score":0,"sourceSpan":{"end":{"column":52,"line":257},"name":".spago/p/integers-6.0.0/src/Data/Int.purs","start":{"column":1,"line":257}}},{"comments":"Bitwise zero-fill shift right.\n","hashAnchor":"v","info":{"tag":"value","value":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Int"]}]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Int"]}]}]}},"moduleName":"Data.Int.Bits","name":"zshr","packageInfo":{"tag":"package","value":"integers-6.0.0"},"score":0,"sourceSpan":{"end":{"column":41,"line":34},"name":".spago/p/integers-6.0.0/src/Data/Int/Bits.purs","start":{"column":1,"line":34}}},{"comments":"Bitwise shift right.\n","hashAnchor":"v","info":{"tag":"value","value":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Int"]}]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Int"]}]}]}},"moduleName":"Data.Int.Bits","name":"shr","packageInfo":{"tag":"package","value":"integers-6.0.0"},"score":0,"sourceSpan":{"end":{"column":40,"line":31},"name":".spago/p/integers-6.0.0/src/Data/Int/Bits.purs","start":{"column":1,"line":31}}},{"comments":"Bitwise shift left.\n","hashAnchor":"v","info":{"tag":"value","value":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Int"]}]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Int"]}]}]}},"moduleName":"Data.Int.Bits","name":"shl","packageInfo":{"tag":"package","value":"integers-6.0.0"},"score":0,"sourceSpan":{"end":{"column":40,"line":28},"name":".spago/p/integers-6.0.0/src/Data/Int/Bits.purs","start":{"column":1,"line":28}}},{"comments":"Bitwise XOR.\n","hashAnchor":"v","info":{"tag":"value","value":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Int"]}]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Int"]}]}]}},"moduleName":"Data.Int.Bits","name":"xor","packageInfo":{"tag":"package","value":"integers-6.0.0"},"score":0,"sourceSpan":{"end":{"column":40,"line":23},"name":".spago/p/integers-6.0.0/src/Data/Int/Bits.purs","start":{"column":1,"line":23}}},{"comments":"Bitwise OR.\n","hashAnchor":"v","info":{"tag":"value","value":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Int"]}]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Int"]}]}]}},"moduleName":"Data.Int.Bits","name":"or","packageInfo":{"tag":"package","value":"integers-6.0.0"},"score":0,"sourceSpan":{"end":{"column":39,"line":18},"name":".spago/p/integers-6.0.0/src/Data/Int/Bits.purs","start":{"column":1,"line":18}}},{"comments":"Bitwise AND.\n","hashAnchor":"v","info":{"tag":"value","value":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Int"]}]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Int"]}]}]}},"moduleName":"Data.Int.Bits","name":"and","packageInfo":{"tag":"package","value":"integers-6.0.0"},"score":0,"sourceSpan":{"end":{"column":40,"line":13},"name":".spago/p/integers-6.0.0/src/Data/Int/Bits.purs","start":{"column":1,"line":13}}},{"comments":"Computes the remainder after division. This is the same as JavaScript's `%` operator.\n","hashAnchor":"v","info":{"tag":"value","value":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Number"]}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Number"]}]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Number"]}]}]}},"moduleName":"Data.Number","name":"remainder","packageInfo":{"tag":"package","value":"numbers-9.0.1"},"score":0,"sourceSpan":{"end":{"column":55,"line":216},"name":".spago/p/numbers-9.0.1/src/Data/Number.purs","start":{"column":1,"line":216}}},{"comments":"Return  the first argument exponentiated to the power of the second argument.\n```purs\n> pow 3.0 2.0\n9.0\n> sqrt 42.0 == pow 42.0 0.5\ntrue\n```\n","hashAnchor":"v","info":{"tag":"value","value":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Number"]}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Number"]}]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Number"]}]}]}},"moduleName":"Data.Number","name":"pow","packageInfo":{"tag":"package","value":"numbers-9.0.1"},"score":0,"sourceSpan":{"end":{"column":49,"line":209},"name":".spago/p/numbers-9.0.1/src/Data/Number.purs","start":{"column":1,"line":209}}},{"comments":"Returns the smallest of two numbers. Unlike `min` in Data.Ord this version\nreturns NaN if either argument is NaN.\n","hashAnchor":"v","info":{"tag":"value","value":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Number"]}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Number"]}]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Number"]}]}]}},"moduleName":"Data.Number","name":"min","packageInfo":{"tag":"package","value":"numbers-9.0.1"},"score":0,"sourceSpan":{"end":{"column":49,"line":199},"name":".spago/p/numbers-9.0.1/src/Data/Number.purs","start":{"column":1,"line":199}}},{"comments":"Returns the largest of two numbers. Unlike `max` in Data.Ord this version\nreturns NaN if either argument is NaN.\n","hashAnchor":"v","info":{"tag":"value","value":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Number"]}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Number"]}]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Number"]}]}]}},"moduleName":"Data.Number","name":"max","packageInfo":{"tag":"package","value":"numbers-9.0.1"},"score":0,"sourceSpan":{"end":{"column":49,"line":195},"name":".spago/p/numbers-9.0.1/src/Data/Number.purs","start":{"column":1,"line":195}}},{"comments":"Four-quadrant tangent inverse. Given the arguments `y` and `x`, returns\nthe inverse tangent of `y / x`, where the signs of both arguments are used\nto determine the sign of the result.\nIf the first argument is negative, the result will be negative.\nThe result is the angle between the positive x axis and a point `(x, y)`.\n```purs\n> atan2 0.0 1.0\n0.0\n> atan2 1.0 0.0 == pi / 2.0\ntrue\n```\n","hashAnchor":"v","info":{"tag":"value","value":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Number"]}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Number"]}]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Number"]}]}]}},"moduleName":"Data.Number","name":"atan2","packageInfo":{"tag":"package","value":"numbers-9.0.1"},"score":0,"sourceSpan":{"end":{"column":51,"line":157},"name":".spago/p/numbers-9.0.1/src/Data/Number.purs","start":{"column":1,"line":157}}},{"comments":"The complement of `eqApproximate`.\n","hashAnchor":"v","info":{"tag":"value","value":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Number"]}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Number"]}]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Boolean"]}]}]}},"moduleName":"Data.Number.Approximate","name":"neqApproximate","packageInfo":{"tag":"package","value":"numbers-9.0.1"},"score":0,"sourceSpan":{"end":{"column":46,"line":73},"name":".spago/p/numbers-9.0.1/src/Data/Number/Approximate.purs","start":{"column":1,"line":73}}},{"comments":"Test if two numbers are approximately equal, up to a relative difference\nof one part in a million:\n``` purs\neqApproximate = eqRelative (Fraction 1.0e-6)\n```\n\nExample\n``` purs\n> 0.1 + 0.2 == 0.3\nfalse\n\n> 0.1 + 0.2 ≅ 0.3\ntrue\n```\n","hashAnchor":"v","info":{"tag":"value","value":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Number"]}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Number"]}]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Boolean"]}]}]}},"moduleName":"Data.Number.Approximate","name":"eqApproximate","packageInfo":{"tag":"package","value":"numbers-9.0.1"},"score":0,"sourceSpan":{"end":{"column":45,"line":63},"name":".spago/p/numbers-9.0.1/src/Data/Number/Approximate.purs","start":{"column":1,"line":63}}},{"comments":"Convert a number to a string with a given format.\n","hashAnchor":"v","info":{"tag":"value","value":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","annotation":null,"contents":[["Data","Number","Format"],"Format"]}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Number"]}]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"String"]}]}]}},"moduleName":"Data.Number.Format","name":"toStringWith","packageInfo":{"tag":"package","value":"numbers-9.0.1"},"score":0,"sourceSpan":{"end":{"column":43,"line":59},"name":".spago/p/numbers-9.0.1/src/Data/Number/Format.purs","start":{"column":1,"line":59}}},{"comments":"Drops the given number of code points from the beginning of the string. If\nthe string does not have that many code points, returns the empty string.\nOperates in constant space and in time linear to the given number.\n\n```purescript\n>>> drop 5 \"𝐀𝐀 b c\"\n\"c\"\n-- compared to Data.String:\n>>> drop 5 \"𝐀𝐀 b c\"\n\"b c\" -- because \"𝐀\" occupies 2 code units\n```\n\n","hashAnchor":"v","info":{"tag":"value","value":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"String"]}]}]}},"moduleName":"Data.String.CodePoints","name":"drop","packageInfo":{"tag":"package","value":"strings-6.0.1"},"score":0,"sourceSpan":{"end":{"column":32,"line":363},"name":".spago/p/strings-6.0.1/src/Data/String/CodePoints.purs","start":{"column":1,"line":363}}},{"comments":"Returns a string containing the given number of code points from the\nbeginning of the given string. If the string does not have that many code\npoints, returns the empty string. Operates in constant space and in time\nlinear to the given number.\n\n```purescript\n>>> take 3 \"b 𝐀𝐀 c 𝐀\"\n\"b 𝐀\"\n-- compare to Data.String:\n>>> take 3 \"b 𝐀𝐀 c 𝐀\"\n\"b �\"\n```\n\n","hashAnchor":"v","info":{"tag":"value","value":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"String"]}]}]}},"moduleName":"Data.String.CodePoints","name":"take","packageInfo":{"tag":"package","value":"strings-6.0.1"},"score":0,"sourceSpan":{"end":{"column":32,"line":328},"name":".spago/p/strings-6.0.1/src/Data/String/CodePoints.purs","start":{"column":1,"line":328}}},{"comments":"Returns the string without the last `n` characters.\n\n```purescript\ndropRight 6 \"Hello World\" == \"Hello\"\n```\n\n","hashAnchor":"v","info":{"tag":"value","value":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"String"]}]}]}},"moduleName":"Data.String.CodeUnits","name":"dropRight","packageInfo":{"tag":"package","value":"strings-6.0.1"},"score":0,"sourceSpan":{"end":{"column":37,"line":287},"name":".spago/p/strings-6.0.1/src/Data/String/CodeUnits.purs","start":{"column":1,"line":287}}},{"comments":"Returns the string without the first `n` characters.\n\n```purescript\ndrop 6 \"Hello World\" == \"World\"\n```\n\n","hashAnchor":"v","info":{"tag":"value","value":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"String"]}]}]}},"moduleName":"Data.String.CodeUnits","name":"drop","packageInfo":{"tag":"package","value":"strings-6.0.1"},"score":0,"sourceSpan":{"end":{"column":47,"line":279},"name":".spago/p/strings-6.0.1/src/Data/String/CodeUnits.purs","start":{"column":1,"line":279}}},{"comments":"Returns the last `n` characters of the string.\n\n```purescript\ntakeRight 5 \"Hello World\" == \"World\"\n```\n\n","hashAnchor":"v","info":{"tag":"value","value":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"String"]}]}]}},"moduleName":"Data.String.CodeUnits","name":"takeRight","packageInfo":{"tag":"package","value":"strings-6.0.1"},"score":0,"sourceSpan":{"end":{"column":37,"line":260},"name":".spago/p/strings-6.0.1/src/Data/String/CodeUnits.purs","start":{"column":1,"line":260}}},{"comments":"Returns the first `n` characters of the string.\n\n```purescript\ntake 5 \"Hello World\" == \"Hello\"\n```\n\n","hashAnchor":"v","info":{"tag":"value","value":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"String"]}]}]}},"moduleName":"Data.String.CodeUnits","name":"take","packageInfo":{"tag":"package","value":"strings-6.0.1"},"score":0,"sourceSpan":{"end":{"column":47,"line":252},"name":".spago/p/strings-6.0.1/src/Data/String/CodeUnits.purs","start":{"column":1,"line":252}}},{"comments":"Checks whether the pattern appears in the given string.\n\n```purescript\ncontains (Pattern \"needle\") \"haystack with needle\" == true\ncontains (Pattern \"needle\") \"haystack\" == false\n```\n","hashAnchor":"v","info":{"tag":"value","value":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","annotation":null,"contents":[["Data","String","Pattern"],"Pattern"]}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Boolean"]}]}]}},"moduleName":"Data.String.CodeUnits","name":"contains","packageInfo":{"tag":"package","value":"strings-6.0.1"},"score":0,"sourceSpan":{"end":{"column":41,"line":70},"name":".spago/p/strings-6.0.1/src/Data/String/CodeUnits.purs","start":{"column":1,"line":70}}},{"comments":"Compare two strings in a locale-aware fashion. This is in contrast to\nthe `Ord` instance on `String` which treats strings as arrays of code\nunits:\n\n```purescript\n\"ä\" `localeCompare` \"b\" == LT\n\"ä\" `compare` \"b\" == GT\n```\n","hashAnchor":"v","info":{"tag":"value","value":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"String"]}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","annotation":null,"contents":[["Data","Ordering"],"Ordering"]}]}]}},"moduleName":"Data.String.Common","name":"localeCompare","packageInfo":{"tag":"package","value":"strings-6.0.1"},"score":0,"sourceSpan":{"end":{"column":46,"line":34},"name":".spago/p/strings-6.0.1/src/Data/String/Common.purs","start":{"column":1,"line":34}}},{"hashAnchor":"v","info":{"tag":"value","value":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","annotation":null,"contents":[["Data","String","CodePoints"],"CodePoint"]}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","annotation":null,"contents":[["Data","String","NonEmpty","Internal"],"NonEmptyString"]}]}]}},"moduleName":"Data.String.NonEmpty.CodePoints","name":"snoc","packageInfo":{"tag":"package","value":"strings-6.0.1"},"score":0,"sourceSpan":{"end":{"column":46,"line":66},"name":".spago/p/strings-6.0.1/src/Data/String/NonEmpty/CodePoints.purs","start":{"column":1,"line":66}}},{"hashAnchor":"v","info":{"tag":"value","value":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","annotation":null,"contents":[["Data","String","CodePoints"],"CodePoint"]}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","annotation":null,"contents":[["Data","String","NonEmpty","Internal"],"NonEmptyString"]}]}]}},"moduleName":"Data.String.NonEmpty.CodePoints","name":"cons","packageInfo":{"tag":"package","value":"strings-6.0.1"},"score":0,"sourceSpan":{"end":{"column":46,"line":63},"name":".spago/p/strings-6.0.1/src/Data/String/NonEmpty/CodePoints.purs","start":{"column":1,"line":63}}},{"comments":"Creates a `NonEmptyString` from a string by appending a character.\n\n```purescript\nsnoc 'c' \"ab\" = NonEmptyString \"abc\"\nsnoc 'a' \"\" = NonEmptyString \"a\"\n```\n","hashAnchor":"v","info":{"tag":"value","value":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Char"]}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","annotation":null,"contents":[["Data","String","NonEmpty","Internal"],"NonEmptyString"]}]}]}},"moduleName":"Data.String.NonEmpty.CodeUnits","name":"snoc","packageInfo":{"tag":"package","value":"strings-6.0.1"},"score":0,"sourceSpan":{"end":{"column":41,"line":88},"name":".spago/p/strings-6.0.1/src/Data/String/NonEmpty/CodeUnits.purs","start":{"column":1,"line":88}}},{"comments":"Creates a `NonEmptyString` from a string by prepending a character.\n\n```purescript\ncons 'a' \"bc\" = NonEmptyString \"abc\"\ncons 'a' \"\" = NonEmptyString \"a\"\n```\n","hashAnchor":"v","info":{"tag":"value","value":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Char"]}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","annotation":null,"contents":[["Data","String","NonEmpty","Internal"],"NonEmptyString"]}]}]}},"moduleName":"Data.String.NonEmpty.CodeUnits","name":"cons","packageInfo":{"tag":"package","value":"strings-6.0.1"},"score":0,"sourceSpan":{"end":{"column":41,"line":79},"name":".spago/p/strings-6.0.1/src/Data/String/NonEmpty/CodeUnits.purs","start":{"column":1,"line":79}}},{"comments":"Compare two strings in a locale-aware fashion. This is in contrast to\nthe `Ord` instance on `String` which treats strings as arrays of code\nunits:\n\n```purescript\nNonEmptyString \"ä\" `localeCompare` NonEmptyString \"b\" == LT\nNonEmptyString \"ä\" `compare` NonEmptyString \"b\" == GT\n```\n","hashAnchor":"v","info":{"tag":"value","value":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","annotation":null,"contents":[["Data","String","NonEmpty","Internal"],"NonEmptyString"]}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","annotation":null,"contents":[["Data","String","NonEmpty","Internal"],"NonEmptyString"]}]},{"tag":"TypeConstructor","annotation":null,"contents":[["Data","Ordering"],"Ordering"]}]}]}},"moduleName":"Data.String.NonEmpty.Internal","name":"localeCompare","packageInfo":{"tag":"package","value":"strings-6.0.1"},"score":0,"sourceSpan":{"end":{"column":62,"line":144},"name":".spago/p/strings-6.0.1/src/Data/String/NonEmpty/Internal.purs","start":{"column":1,"line":144}}},{"comments":"Checks whether the pattern appears in the given string.\n\n```purescript\ncontains (Pattern \"needle\") (NonEmptyString \"haystack with needle\") == true\ncontains (Pattern \"needle\") (NonEmptyString \"haystack\") == false\n```\n","hashAnchor":"v","info":{"tag":"value","value":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","annotation":null,"contents":[["Data","String","Pattern"],"Pattern"]}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","annotation":null,"contents":[["Data","String","NonEmpty","Internal"],"NonEmptyString"]}]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Boolean"]}]}]}},"moduleName":"Data.String.NonEmpty.Internal","name":"contains","packageInfo":{"tag":"package","value":"strings-6.0.1"},"score":0,"sourceSpan":{"end":{"column":49,"line":133},"name":".spago/p/strings-6.0.1/src/Data/String/NonEmpty/Internal.purs","start":{"column":1,"line":133}}},{"comments":"Prepends a string to this non-empty string. Since one of the strings is\nnon-empty we know the result will be too.\n\n```purescript\nprependString \"be\" (NonEmptyString \"fore\") == NonEmptyString \"before\"\nprependString \"\" (NonEmptyString \"fore\") == NonEmptyString \"fore\"\n```\n","hashAnchor":"v","info":{"tag":"value","value":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"String"]}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","annotation":null,"contents":[["Data","String","NonEmpty","Internal"],"NonEmptyString"]}]},{"tag":"TypeConstructor","annotation":null,"contents":[["Data","String","NonEmpty","Internal"],"NonEmptyString"]}]}]}},"moduleName":"Data.String.NonEmpty.Internal","name":"prependString","packageInfo":{"tag":"package","value":"strings-6.0.1"},"score":0,"sourceSpan":{"end":{"column":60,"line":100},"name":".spago/p/strings-6.0.1/src/Data/String/NonEmpty/Internal.purs","start":{"column":1,"line":100}}},{"comments":"Appends a string to this non-empty string. Since one of the strings is\nnon-empty we know the result will be too.\n\n```purescript\nappendString (NonEmptyString \"Hello\") \" world\" == NonEmptyString \"Hello world\"\nappendString (NonEmptyString \"Hello\") \"\" == NonEmptyString \"Hello\"\n```\n","hashAnchor":"v","info":{"tag":"value","value":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","annotation":null,"contents":[["Data","String","NonEmpty","Internal"],"NonEmptyString"]}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","annotation":null,"contents":[["Data","String","NonEmpty","Internal"],"NonEmptyString"]}]}]}},"moduleName":"Data.String.NonEmpty.Internal","name":"appendString","packageInfo":{"tag":"package","value":"strings-6.0.1"},"score":0,"sourceSpan":{"end":{"column":59,"line":90},"name":".spago/p/strings-6.0.1/src/Data/String/NonEmpty/Internal.purs","start":{"column":1,"line":90}}},{"comments":"Returns `true` if the `Regex` matches the string. In contrast to\n`RegExp.prototype.test()` in JavaScript, `test` does not affect\nthe `lastIndex` property of the Regex.\n","hashAnchor":"v","info":{"tag":"value","value":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","annotation":null,"contents":[["Data","String","Regex"],"Regex"]}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Boolean"]}]}]}},"moduleName":"Data.String.Regex","name":"test","packageInfo":{"tag":"package","value":"strings-6.0.1"},"score":0,"sourceSpan":{"end":{"column":50,"line":82},"name":".spago/p/strings-6.0.1/src/Data/String/Regex.purs","start":{"column":1,"line":82}}},{"comments":"Constructs a `Regex` from a pattern string and flags. Fails with\nan exception if the pattern contains a syntax error.\n","hashAnchor":"v","info":{"tag":"value","value":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"String"]}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","annotation":null,"contents":[["Data","String","Regex","Flags"],"RegexFlags"]}]},{"tag":"TypeConstructor","annotation":null,"contents":[["Data","String","Regex"],"Regex"]}]}]}},"moduleName":"Data.String.Regex.Unsafe","name":"unsafeRegex","packageInfo":{"tag":"package","value":"strings-6.0.1"},"score":0,"sourceSpan":{"end":{"column":45,"line":13},"name":".spago/p/strings-6.0.1/src/Data/String/Regex/Unsafe.purs","start":{"column":1,"line":13}}},{"comments":"Returns the character at the given index.\n\n**Unsafe:** throws runtime exception if the index is out of bounds.\n","hashAnchor":"v","info":{"tag":"value","value":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Char"]}]}]}},"moduleName":"Data.String.Unsafe","name":"charAt","packageInfo":{"tag":"package","value":"strings-6.0.1"},"score":0,"sourceSpan":{"end":{"column":47,"line":10},"name":".spago/p/strings-6.0.1/src/Data/String/Unsafe.purs","start":{"column":1,"line":10}}}]}