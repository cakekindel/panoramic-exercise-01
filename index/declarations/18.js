// This file was generated by docs-search.
window.DocsSearchIndex["18"] = [["t4",[{"hashAnchor":"t","info":{"tag":"typeSynonym","value":{"arguments":[{"name":"a"},{"name":"b"},{"name":"c"},{"name":"z"}],"type":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","annotation":null,"contents":"a"}]},{"tag":"ParensInType","annotation":null,"contents":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Data","Tuple","Nested"],"T3"]},{"tag":"TypeVar","annotation":null,"contents":"b"}]},{"tag":"TypeVar","annotation":null,"contents":"c"}]},{"tag":"TypeVar","annotation":null,"contents":"z"}]}}]}}},"moduleName":"Data.Tuple.Nested","name":"T4","packageInfo":{"tag":"package","value":"tuples-7.0.0"},"score":0,"sourceSpan":{"end":{"column":37,"line":87},"name":".spago/p/tuples-7.0.0/src/Data/Tuple/Nested.purs","start":{"column":1,"line":87}}},{"hashAnchor":"t","info":{"tag":"typeSynonym","value":{"arguments":[{"name":"a"},{"name":"b"},{"name":"c"},{"name":"z"}],"type":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Data","Functor","Product"],"Product"]},{"tag":"TypeVar","annotation":null,"contents":"a"}]},{"tag":"ParensInType","annotation":null,"contents":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Data","Functor","Product","Nested"],"T3"]},{"tag":"TypeVar","annotation":null,"contents":"b"}]},{"tag":"TypeVar","annotation":null,"contents":"c"}]},{"tag":"TypeVar","annotation":null,"contents":"z"}]}}]}}},"moduleName":"Data.Functor.Product.Nested","name":"T4","packageInfo":{"tag":"package","value":"functors-5.0.0"},"score":0,"sourceSpan":{"end":{"column":39,"line":35},"name":".spago/p/functors-5.0.0/src/Data/Functor/Product/Nested.purs","start":{"column":1,"line":35}}}]],["ln10",[{"comments":"The natural logarithm of 10.\n```purs\n> log 10.0 == ln10\ntrue\n\n> ln10\n2.302585092994046\n```\n","hashAnchor":"v","info":{"tag":"value","value":{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Number"]}},"moduleName":"Data.Number","name":"ln10","packageInfo":{"tag":"package","value":"numbers-9.0.1"},"score":0,"sourceSpan":{"end":{"column":15,"line":299},"name":".spago/p/numbers-9.0.1/src/Data/Number.purs","start":{"column":1,"line":299}}}]],["ln2",[{"comments":"The natural logarithm of 2.\n```purs\n> log 2.0 == ln2\ntrue\n\n> ln2\n0.6931471805599453\n```\n","hashAnchor":"v","info":{"tag":"value","value":{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Number"]}},"moduleName":"Data.Number","name":"ln2","packageInfo":{"tag":"package","value":"numbers-9.0.1"},"score":0,"sourceSpan":{"end":{"column":14,"line":288},"name":".spago/p/numbers-9.0.1/src/Data/Number.purs","start":{"column":1,"line":288}}}]],["euclideanring",[{"comments":"The `EuclideanRing` class is for commutative rings that support division.\nThe mathematical structure this class is based on is sometimes also called\na *Euclidean domain*.\n\nInstances must satisfy the following laws in addition to the `Ring`\nlaws:\n\n- Integral domain: `one /= zero`, and if `a` and `b` are both nonzero then\n  so is their product `a * b`\n- Euclidean function `degree`:\n  - Nonnegativity: For all nonzero `a`, `degree a >= 0`\n  - Quotient/remainder: For all `a` and `b`, where `b` is nonzero,\n    let `q = a / b` and ``r = a `mod` b``; then `a = q*b + r`, and also\n    either `r = zero` or `degree r < degree b`\n- Submultiplicative euclidean function:\n  - For all nonzero `a` and `b`, `degree a <= degree (a * b)`\n\nThe behaviour of division by `zero` is unconstrained by these laws,\nmeaning that individual instances are free to choose how to behave in this\ncase. Similarly, there are no restrictions on what the result of\n`degree zero` is; it doesn't make sense to ask for `degree zero` in the\nsame way that it doesn't make sense to divide by `zero`, so again,\nindividual instances may choose how to handle this case.\n\nFor any `EuclideanRing` which is also a `Field`, one valid choice\nfor `degree` is simply `const 1`. In fact, unless there's a specific\nreason not to, `Field` types should normally use this definition of\n`degree`.\n\nThe `EuclideanRing Int` instance is one of the most commonly used\n`EuclideanRing` instances and deserves a little more discussion. In\nparticular, there are a few different sensible law-abiding implementations\nto choose from, with slightly different behaviour in the presence of\nnegative dividends or divisors. The most common definitions are \"truncating\"\ndivision, where the result of `a / b` is rounded towards 0, and \"Knuthian\"\nor \"flooring\" division, where the result of `a / b` is rounded towards\nnegative infinity. A slightly less common, but arguably more useful, option\nis \"Euclidean\" division, which is defined so as to ensure that ``a `mod` b``\nis always nonnegative. With Euclidean division, `a / b` rounds towards\nnegative infinity if the divisor is positive, and towards positive infinity\nif the divisor is negative. Note that all three definitions are identical if\nwe restrict our attention to nonnegative dividends and divisors.\n\nIn versions 1.x, 2.x, and 3.x of the Prelude, the `EuclideanRing Int`\ninstance used truncating division. As of 4.x, the `EuclideanRing Int`\ninstance uses Euclidean division. Additional functions `quot` and `rem` are\nsupplied if truncating division is desired.\n","hashAnchor":"t","info":{"tag":"typeClass","value":{"arguments":[{"name":"a"}],"fundeps":[],"superclasses":[{"constraintAnn":null,"constraintArgs":[{"tag":"TypeVar","annotation":null,"contents":"a"}],"constraintClass":[["Data","CommutativeRing"],"CommutativeRing"],"constraintData":null,"constraintKindArgs":[]}]}},"moduleName":"Data.EuclideanRing","name":"EuclideanRing","packageInfo":{"tag":"package","value":"prelude-6.0.1"},"score":0,"sourceSpan":{"end":{"column":21,"line":70},"name":".spago/p/prelude-6.0.1/src/Data/EuclideanRing.purs","start":{"column":1,"line":67}}}]]]