// This file was generated by docs-search.
window.DocsSearchIndex["20"] = [["thaw",[{"hashAnchor":"v","info":{"tag":"value","value":{"tag":"ForAll","annotation":null,"contents":{"visibility":"TypeVarInvisible","identifier":"h","kind":null,"type":{"tag":"ForAll","annotation":null,"contents":{"visibility":"TypeVarInvisible","identifier":"a","kind":null,"type":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Array"]},{"tag":"TypeVar","annotation":null,"contents":"a"}]}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Control","Monad","ST","Internal"],"ST"]},{"tag":"TypeVar","annotation":null,"contents":"h"}]},{"tag":"ParensInType","annotation":null,"contents":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Data","Array","ST"],"STArray"]},{"tag":"TypeVar","annotation":null,"contents":"h"}]},{"tag":"TypeVar","annotation":null,"contents":"a"}]}}]}]},"skolem":null}},"skolem":null}}},"moduleName":"Data.Array.ST","name":"thaw","packageInfo":{"tag":"package","value":"arrays-7.3.0"},"score":0,"sourceSpan":{"end":{"column":24,"line":93},"name":".spago/p/arrays-7.3.0/src/Data/Array/ST.purs","start":{"column":1,"line":90}}}]],["thawst",[{"comments":"Convert an immutable Object into a mutable Object\n","hashAnchor":"v","info":{"tag":"value","value":{"tag":"ForAll","annotation":null,"contents":{"visibility":"TypeVarInvisible","identifier":"a","kind":null,"type":{"tag":"ForAll","annotation":null,"contents":{"visibility":"TypeVarInvisible","identifier":"r","kind":null,"type":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Foreign","Object"],"Object"]},{"tag":"TypeVar","annotation":null,"contents":"a"}]}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Control","Monad","ST","Internal"],"ST"]},{"tag":"TypeVar","annotation":null,"contents":"r"}]},{"tag":"ParensInType","annotation":null,"contents":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Foreign","Object","ST"],"STObject"]},{"tag":"TypeVar","annotation":null,"contents":"r"}]},{"tag":"TypeVar","annotation":null,"contents":"a"}]}}]}]},"skolem":null}},"skolem":null}}},"moduleName":"Foreign.Object","name":"thawST","packageInfo":{"tag":"package","value":"foreign-object-4.1.0"},"score":0,"sourceSpan":{"end":{"column":54,"line":74},"name":".spago/p/foreign-object-4.1.0/src/Foreign/Object.purs","start":{"column":1,"line":74}}}]],["t6",[{"hashAnchor":"t","info":{"tag":"typeSynonym","value":{"arguments":[{"name":"a"},{"name":"b"},{"name":"c"},{"name":"d"},{"name":"e"},{"name":"z"}],"type":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","annotation":null,"contents":"a"}]},{"tag":"ParensInType","annotation":null,"contents":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Data","Tuple","Nested"],"T5"]},{"tag":"TypeVar","annotation":null,"contents":"b"}]},{"tag":"TypeVar","annotation":null,"contents":"c"}]},{"tag":"TypeVar","annotation":null,"contents":"d"}]},{"tag":"TypeVar","annotation":null,"contents":"e"}]},{"tag":"TypeVar","annotation":null,"contents":"z"}]}}]}}},"moduleName":"Data.Tuple.Nested","name":"T6","packageInfo":{"tag":"package","value":"tuples-7.0.0"},"score":0,"sourceSpan":{"end":{"column":45,"line":89},"name":".spago/p/tuples-7.0.0/src/Data/Tuple/Nested.purs","start":{"column":1,"line":89}}},{"hashAnchor":"t","info":{"tag":"typeSynonym","value":{"arguments":[{"name":"a"},{"name":"b"},{"name":"c"},{"name":"d"},{"name":"e"},{"name":"z"}],"type":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Data","Functor","Product"],"Product"]},{"tag":"TypeVar","annotation":null,"contents":"a"}]},{"tag":"ParensInType","annotation":null,"contents":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Data","Functor","Product","Nested"],"T5"]},{"tag":"TypeVar","annotation":null,"contents":"b"}]},{"tag":"TypeVar","annotation":null,"contents":"c"}]},{"tag":"TypeVar","annotation":null,"contents":"d"}]},{"tag":"TypeVar","annotation":null,"contents":"e"}]},{"tag":"TypeVar","annotation":null,"contents":"z"}]}}]}}},"moduleName":"Data.Functor.Product.Nested","name":"T6","packageInfo":{"tag":"package","value":"functors-5.0.0"},"score":0,"sourceSpan":{"end":{"column":47,"line":39},"name":".spago/p/functors-5.0.0/src/Data/Functor/Product/Nested.purs","start":{"column":1,"line":39}}}]],["sign",[{"comments":"Returns either a positive or negative +/- 1, indicating the sign of the\nargument. If the argument is 0, it will return a +/- 0. If the argument is\nNaN it will return NaN.\n```purs\n> x = -42.0\n> sign x * abs x == x\ntrue\n```\n","hashAnchor":"v","info":{"tag":"value","value":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Number"]}]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Number"]}]}},"moduleName":"Data.Number","name":"sign","packageInfo":{"tag":"package","value":"numbers-9.0.1"},"score":0,"sourceSpan":{"end":{"column":40,"line":235},"name":".spago/p/numbers-9.0.1/src/Data/Number.purs","start":{"column":1,"line":235}}}]],["signum",[{"comments":"The sign function; returns `one` if the argument is positive,\n`negate one` if the argument is negative, or `zero` if the argument is `zero`.\nFor floating point numbers with signed zeroes, when called with a zero,\nthis function returns the argument in order to preserve the sign.\nFor any `x`, we should have `signum x * abs x == x`.\n","hashAnchor":"v","info":{"tag":"value","value":{"tag":"ForAll","annotation":null,"contents":{"visibility":"TypeVarInvisible","identifier":"a","kind":null,"type":{"tag":"ConstrainedType","annotation":null,"contents":[{"constraintAnn":null,"constraintArgs":[{"tag":"TypeVar","annotation":null,"contents":"a"}],"constraintClass":[["Data","Ord"],"Ord"],"constraintData":null,"constraintKindArgs":[]},{"tag":"ConstrainedType","annotation":null,"contents":[{"constraintAnn":null,"constraintArgs":[{"tag":"TypeVar","annotation":null,"contents":"a"}],"constraintClass":[["Data","Ring"],"Ring"],"constraintData":null,"constraintKindArgs":[]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeVar","annotation":null,"contents":"a"}]},{"tag":"TypeVar","annotation":null,"contents":"a"}]}]}]},"skolem":null}}},"moduleName":"Data.Ord","name":"signum","packageInfo":{"tag":"package","value":"prelude-6.0.1"},"score":0,"sourceSpan":{"end":{"column":46,"line":224},"name":".spago/p/prelude-6.0.1/src/Data/Ord.purs","start":{"column":1,"line":224}}}]],["sin",[{"comments":"Returns the sine of the argument, where the argument is in radians.\n```purs\n> sin (pi / 2.0)\n1.0\n```\n","hashAnchor":"v","info":{"tag":"value","value":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Number"]}]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Number"]}]}},"moduleName":"Data.Number","name":"sin","packageInfo":{"tag":"package","value":"numbers-9.0.1"},"score":0,"sourceSpan":{"end":{"column":39,"line":242},"name":".spago/p/numbers-9.0.1/src/Data/Number.purs","start":{"column":1,"line":242}}}]],["singleton",[{"comments":"Create an `Object a` with one key/value pair\n","hashAnchor":"v","info":{"tag":"value","value":{"tag":"ForAll","annotation":null,"contents":{"visibility":"TypeVarInvisible","identifier":"a","kind":null,"type":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"String"]}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeVar","annotation":null,"contents":"a"}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Foreign","Object"],"Object"]},{"tag":"TypeVar","annotation":null,"contents":"a"}]}]}]},"skolem":null}}},"moduleName":"Foreign.Object","name":"singleton","packageInfo":{"tag":"package","value":"foreign-object-4.1.0"},"score":0,"sourceSpan":{"end":{"column":47,"line":182},"name":".spago/p/foreign-object-4.1.0/src/Foreign/Object.purs","start":{"column":1,"line":182}}},{"comments":"Contain a single value. For example:\n\n``` purescript\nsingleton \"foo\" == (NEL.singleton \"foo\" :: NEL.NonEmptyList String)\n```\n","hashAnchor":"v","info":{"tag":"value","value":{"tag":"ForAll","annotation":null,"contents":{"visibility":"TypeVarInvisible","identifier":"f","kind":null,"type":{"tag":"ForAll","annotation":null,"contents":{"visibility":"TypeVarInvisible","identifier":"a","kind":null,"type":{"tag":"ConstrainedType","annotation":null,"contents":[{"constraintAnn":null,"constraintArgs":[{"tag":"TypeVar","annotation":null,"contents":"f"}],"constraintClass":[["Data","Unfoldable1"],"Unfoldable1"],"constraintData":null,"constraintKindArgs":[]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeVar","annotation":null,"contents":"a"}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeVar","annotation":null,"contents":"f"},{"tag":"TypeVar","annotation":null,"contents":"a"}]}]}]},"skolem":null}},"skolem":null}}},"moduleName":"Data.Unfoldable1","name":"singleton","packageInfo":{"tag":"package","value":"unfoldable-6.0.0"},"score":0,"sourceSpan":{"end":{"column":51,"line":97},"name":".spago/p/unfoldable-6.0.0/src/Data/Unfoldable1.purs","start":{"column":1,"line":97}}},{"comments":"Creates a `NonEmptyString` from a character.\n","hashAnchor":"v","info":{"tag":"value","value":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Char"]}]},{"tag":"TypeConstructor","annotation":null,"contents":[["Data","String","NonEmpty","Internal"],"NonEmptyString"]}]}},"moduleName":"Data.String.NonEmpty.CodeUnits","name":"singleton","packageInfo":{"tag":"package","value":"strings-6.0.1"},"score":0,"sourceSpan":{"end":{"column":36,"line":70},"name":".spago/p/strings-6.0.1/src/Data/String/NonEmpty/CodeUnits.purs","start":{"column":1,"line":70}}},{"hashAnchor":"v","info":{"tag":"value","value":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","annotation":null,"contents":[["Data","String","CodePoints"],"CodePoint"]}]},{"tag":"TypeConstructor","annotation":null,"contents":[["Data","String","NonEmpty","Internal"],"NonEmptyString"]}]}},"moduleName":"Data.String.NonEmpty.CodePoints","name":"singleton","packageInfo":{"tag":"package","value":"strings-6.0.1"},"score":0,"sourceSpan":{"end":{"column":41,"line":60},"name":".spago/p/strings-6.0.1/src/Data/String/NonEmpty/CodePoints.purs","start":{"column":1,"line":60}}},{"comments":"Returns a string of length `1` containing the given character.\n\n```purescript\nsingleton 'l' == \"l\"\n```\n\n","hashAnchor":"v","info":{"tag":"value","value":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Char"]}]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"String"]}]}},"moduleName":"Data.String.CodeUnits","name":"singleton","packageInfo":{"tag":"package","value":"strings-6.0.1"},"score":0,"sourceSpan":{"end":{"column":43,"line":83},"name":".spago/p/strings-6.0.1/src/Data/String/CodeUnits.purs","start":{"column":1,"line":83}}},{"comments":"Creates a string containing just the given code point. Operates in\nconstant space and time.\n\n```purescript\n>>> map singleton (toEnum 0x1D400)\nJust \"𝐀\"\n```\n\n","hashAnchor":"v","info":{"tag":"value","value":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","annotation":null,"contents":[["Data","String","CodePoints"],"CodePoint"]}]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"String"]}]}},"moduleName":"Data.String.CodePoints","name":"singleton","packageInfo":{"tag":"package","value":"strings-6.0.1"},"score":0,"sourceSpan":{"end":{"column":33,"line":88},"name":".spago/p/strings-6.0.1/src/Data/String/CodePoints.purs","start":{"column":1,"line":88}}},{"comments":"Create a set with one element.\n","hashAnchor":"v","info":{"tag":"value","value":{"tag":"ForAll","annotation":null,"contents":{"visibility":"TypeVarInvisible","identifier":"a","kind":null,"type":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeVar","annotation":null,"contents":"a"}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Data","Set","NonEmpty"],"NonEmptySet"]},{"tag":"TypeVar","annotation":null,"contents":"a"}]}]},"skolem":null}}},"moduleName":"Data.Set.NonEmpty","name":"singleton","packageInfo":{"tag":"package","value":"ordered-collections-3.2.0"},"score":0,"sourceSpan":{"end":{"column":42,"line":64},"name":".spago/p/ordered-collections-3.2.0/src/Data/Set/NonEmpty.purs","start":{"column":1,"line":64}}},{"comments":"Create a set with one element\n","hashAnchor":"v","info":{"tag":"value","value":{"tag":"ForAll","annotation":null,"contents":{"visibility":"TypeVarInvisible","identifier":"a","kind":null,"type":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeVar","annotation":null,"contents":"a"}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Data","Set"],"Set"]},{"tag":"TypeVar","annotation":null,"contents":"a"}]}]},"skolem":null}}},"moduleName":"Data.Set","name":"singleton","packageInfo":{"tag":"package","value":"ordered-collections-3.2.0"},"score":0,"sourceSpan":{"end":{"column":34,"line":96},"name":".spago/p/ordered-collections-3.2.0/src/Data/Set.purs","start":{"column":1,"line":96}}},{"comments":"Create a non-empty structure with a single value.\n\n```purescript\nimport Prelude\n\nsingleton 1 == 1 :| []\nsingleton 1 == 1 :| Nil\n```\n","hashAnchor":"v","info":{"tag":"value","value":{"tag":"ForAll","annotation":null,"contents":{"visibility":"TypeVarInvisible","identifier":"f","kind":null,"type":{"tag":"ForAll","annotation":null,"contents":{"visibility":"TypeVarInvisible","identifier":"a","kind":null,"type":{"tag":"ConstrainedType","annotation":null,"contents":[{"constraintAnn":null,"constraintArgs":[{"tag":"TypeVar","annotation":null,"contents":"f"}],"constraintClass":[["Control","Plus"],"Plus"],"constraintData":null,"constraintKindArgs":[]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeVar","annotation":null,"contents":"a"}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Data","NonEmpty"],"NonEmpty"]},{"tag":"TypeVar","annotation":null,"contents":"f"}]},{"tag":"TypeVar","annotation":null,"contents":"a"}]}]}]},"skolem":null}},"skolem":null}}},"moduleName":"Data.NonEmpty","name":"singleton","packageInfo":{"tag":"package","value":"nonempty-7.0.0"},"score":0,"sourceSpan":{"end":{"column":53,"line":67},"name":".spago/p/nonempty-7.0.0/src/Data/NonEmpty.purs","start":{"column":1,"line":67}}},{"comments":"Create a map with one key/value pair\n","hashAnchor":"v","info":{"tag":"value","value":{"tag":"ForAll","annotation":null,"contents":{"visibility":"TypeVarInvisible","identifier":"k","kind":null,"type":{"tag":"ForAll","annotation":null,"contents":{"visibility":"TypeVarInvisible","identifier":"v","kind":null,"type":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeVar","annotation":null,"contents":"k"}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeVar","annotation":null,"contents":"v"}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Data","Map","Internal"],"Map"]},{"tag":"TypeVar","annotation":null,"contents":"k"}]},{"tag":"TypeVar","annotation":null,"contents":"v"}]}]}]},"skolem":null}},"skolem":null}}},"moduleName":"Data.Map.Internal","name":"singleton","packageInfo":{"tag":"package","value":"ordered-collections-3.2.0"},"score":0,"sourceSpan":{"end":{"column":43,"line":250},"name":".spago/p/ordered-collections-3.2.0/src/Data/Map/Internal.purs","start":{"column":1,"line":250}}},{"hashAnchor":"v","info":{"tag":"value","value":{"tag":"ForAll","annotation":null,"contents":{"visibility":"TypeVarInvisible","identifier":"a","kind":null,"type":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeVar","annotation":null,"contents":"a"}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Data","List","Types"],"NonEmptyList"]},{"tag":"TypeVar","annotation":null,"contents":"a"}]}]},"skolem":null}}},"moduleName":"Data.List.NonEmpty","name":"singleton","packageInfo":{"tag":"package","value":"lists-7.0.0"},"score":0,"sourceSpan":{"end":{"column":43,"line":128},"name":".spago/p/lists-7.0.0/src/Data/List/NonEmpty.purs","start":{"column":1,"line":128}}},{"hashAnchor":"v","info":{"tag":"value","value":{"tag":"ForAll","annotation":null,"contents":{"visibility":"TypeVarInvisible","identifier":"a","kind":null,"type":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeVar","annotation":null,"contents":"a"}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Data","List","Lazy","Types"],"NonEmptyList"]},{"tag":"TypeVar","annotation":null,"contents":"a"}]}]},"skolem":null}}},"moduleName":"Data.List.Lazy.NonEmpty","name":"singleton","packageInfo":{"tag":"package","value":"lists-7.0.0"},"score":0,"sourceSpan":{"end":{"column":43,"line":49},"name":".spago/p/lists-7.0.0/src/Data/List/Lazy/NonEmpty.purs","start":{"column":1,"line":49}}},{"comments":"Create a list with a single element.\n\nRunning time: `O(1)`\n","hashAnchor":"v","info":{"tag":"value","value":{"tag":"ForAll","annotation":null,"contents":{"visibility":"TypeVarInvisible","identifier":"a","kind":null,"type":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeVar","annotation":null,"contents":"a"}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Data","List","Lazy","Types"],"List"]},{"tag":"TypeVar","annotation":null,"contents":"a"}]}]},"skolem":null}}},"moduleName":"Data.List.Lazy","name":"singleton","packageInfo":{"tag":"package","value":"lists-7.0.0"},"score":0,"sourceSpan":{"end":{"column":35,"line":141},"name":".spago/p/lists-7.0.0/src/Data/List/Lazy.purs","start":{"column":1,"line":141}}},{"comments":"Create a list with a single element.\n\nRunning time: `O(1)`\n","hashAnchor":"v","info":{"tag":"value","value":{"tag":"ForAll","annotation":null,"contents":{"visibility":"TypeVarInvisible","identifier":"a","kind":null,"type":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeVar","annotation":null,"contents":"a"}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Data","List","Types"],"List"]},{"tag":"TypeVar","annotation":null,"contents":"a"}]}]},"skolem":null}}},"moduleName":"Data.List","name":"singleton","packageInfo":{"tag":"package","value":"lists-7.0.0"},"score":0,"sourceSpan":{"end":{"column":35,"line":137},"name":".spago/p/lists-7.0.0/src/Data/List.purs","start":{"column":1,"line":137}}},{"hashAnchor":"v","info":{"tag":"value","value":{"tag":"ForAll","annotation":null,"contents":{"visibility":"TypeVarInvisible","identifier":"a","kind":null,"type":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeVar","annotation":null,"contents":"a"}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Data","Array","NonEmpty","Internal"],"NonEmptyArray"]},{"tag":"TypeVar","annotation":null,"contents":"a"}]}]},"skolem":null}}},"moduleName":"Data.Array.NonEmpty","name":"singleton","packageInfo":{"tag":"package","value":"arrays-7.3.0"},"score":0,"sourceSpan":{"end":{"column":44,"line":198},"name":".spago/p/arrays-7.3.0/src/Data/Array/NonEmpty.purs","start":{"column":1,"line":198}}},{"comments":"Create an array of one element\n```purescript\nsingleton 2 = [2]\n```\n","hashAnchor":"v","info":{"tag":"value","value":{"tag":"ForAll","annotation":null,"contents":{"visibility":"TypeVarInvisible","identifier":"a","kind":null,"type":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeVar","annotation":null,"contents":"a"}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Array"]},{"tag":"TypeVar","annotation":null,"contents":"a"}]}]},"skolem":null}}},"moduleName":"Data.Array","name":"singleton","packageInfo":{"tag":"package","value":"arrays-7.3.0"},"score":0,"sourceSpan":{"end":{"column":36,"line":185},"name":".spago/p/arrays-7.3.0/src/Data/Array.purs","start":{"column":1,"line":185}}}]],["size",[{"comments":"Calculate the number of key/value pairs in a map\n","hashAnchor":"v","info":{"tag":"value","value":{"tag":"ForAll","annotation":null,"contents":{"visibility":"TypeVarInvisible","identifier":"a","kind":null,"type":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Foreign","Object"],"Object"]},{"tag":"TypeVar","annotation":null,"contents":"a"}]}]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Int"]}]},"skolem":null}}},"moduleName":"Foreign.Object","name":"size","packageInfo":{"tag":"package","value":"foreign-object-4.1.0"},"score":0,"sourceSpan":{"end":{"column":49,"line":179},"name":".spago/p/foreign-object-4.1.0/src/Foreign/Object.purs","start":{"column":1,"line":179}}},{"comments":"Find the size of a set.\n","hashAnchor":"v","info":{"tag":"value","value":{"tag":"ForAll","annotation":null,"contents":{"visibility":"TypeVarInvisible","identifier":"a","kind":null,"type":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Data","Set","NonEmpty"],"NonEmptySet"]},{"tag":"TypeVar","annotation":null,"contents":"a"}]}]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Int"]}]},"skolem":null}}},"moduleName":"Data.Set.NonEmpty","name":"size","packageInfo":{"tag":"package","value":"ordered-collections-3.2.0"},"score":0,"sourceSpan":{"end":{"column":39,"line":121},"name":".spago/p/ordered-collections-3.2.0/src/Data/Set/NonEmpty.purs","start":{"column":1,"line":121}}},{"comments":"Find the size of a set\n","hashAnchor":"v","info":{"tag":"value","value":{"tag":"ForAll","annotation":null,"contents":{"visibility":"TypeVarInvisible","identifier":"a","kind":null,"type":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Data","Set"],"Set"]},{"tag":"TypeVar","annotation":null,"contents":"a"}]}]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Int"]}]},"skolem":null}}},"moduleName":"Data.Set","name":"size","packageInfo":{"tag":"package","value":"ordered-collections-3.2.0"},"score":0,"sourceSpan":{"end":{"column":31,"line":130},"name":".spago/p/ordered-collections-3.2.0/src/Data/Set.purs","start":{"column":1,"line":130}}},{"comments":"Calculate the number of key/value pairs in a map\n","hashAnchor":"v","info":{"tag":"value","value":{"tag":"ForAll","annotation":null,"contents":{"visibility":"TypeVarInvisible","identifier":"k","kind":null,"type":{"tag":"ForAll","annotation":null,"contents":{"visibility":"TypeVarInvisible","identifier":"v","kind":null,"type":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Data","Map","Internal"],"Map"]},{"tag":"TypeVar","annotation":null,"contents":"k"}]},{"tag":"TypeVar","annotation":null,"contents":"v"}]}]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Int"]}]},"skolem":null}},"skolem":null}}},"moduleName":"Data.Map.Internal","name":"size","packageInfo":{"tag":"package","value":"ordered-collections-3.2.0"},"score":0,"sourceSpan":{"end":{"column":35,"line":617},"name":".spago/p/ordered-collections-3.2.0/src/Data/Map/Internal.purs","start":{"column":1,"line":617}}},{"hashAnchor":"t","info":{"tag":"typeSynonym","value":{"arguments":[],"type":{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Int"]}}},"moduleName":"Control.Monad.Gen.Class","name":"Size","packageInfo":{"tag":"package","value":"gen-4.0.0"},"score":0,"sourceSpan":{"end":{"column":16,"line":29},"name":".spago/p/gen-4.0.0/src/Control/Monad/Gen/Class.purs","start":{"column":1,"line":29}}}]],["sized",[{"comments":"Runs a generator, passing in the current size state.\n","hashAnchor":"v","info":{"tag":"typeClassMember","value":{"type":{"tag":"ForAll","annotation":null,"contents":{"visibility":"TypeVarInvisible","identifier":"m","kind":null,"type":{"tag":"ForAll","annotation":null,"contents":{"visibility":"TypeVarInvisible","identifier":"a","kind":null,"type":{"tag":"ConstrainedType","annotation":null,"contents":[{"constraintAnn":null,"constraintArgs":[{"tag":"TypeVar","annotation":null,"contents":"m"}],"constraintClass":[["Control","Monad","Gen","Class"],"MonadGen"],"constraintData":null,"constraintKindArgs":[]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"ParensInType","annotation":null,"contents":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","annotation":null,"contents":[["Control","Monad","Gen","Class"],"Size"]}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeVar","annotation":null,"contents":"m"},{"tag":"TypeVar","annotation":null,"contents":"a"}]}]}}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeVar","annotation":null,"contents":"m"},{"tag":"TypeVar","annotation":null,"contents":"a"}]}]}]},"skolem":null}},"skolem":null}},"typeClass":[["Control","Monad","Gen","Class"],"MonadGen"],"typeClassArguments":[{"name":"m"}]}},"moduleName":"Control.Monad.Gen.Class","name":"sized","packageInfo":{"tag":"package","value":"gen-4.0.0"},"score":0,"sourceSpan":{"end":{"column":42,"line":27},"name":".spago/p/gen-4.0.0/src/Control/Monad/Gen/Class.purs","start":{"column":3,"line":27}}}]],["plus",[{"comments":"The `Plus` type class extends the `Alt` type class with a value that\nshould be the left and right identity for `(<|>)`.\n\nIt is similar to `Monoid`, except that it applies to types of\nkind `* -> *`, like `Array` or `List`, rather than concrete types like\n`String` or `Number`.\n\n`Plus` instances should satisfy the following laws:\n\n- Left identity: `empty <|> x == x`\n- Right identity: `x <|> empty == x`\n- Annihilation: `f <$> empty == empty`\n","hashAnchor":"t","info":{"tag":"typeClass","value":{"arguments":[{"name":"f"}],"fundeps":[],"superclasses":[{"constraintAnn":null,"constraintArgs":[{"tag":"TypeVar","annotation":null,"contents":"f"}],"constraintClass":[["Control","Alt"],"Alt"],"constraintData":null,"constraintKindArgs":[]}]}},"moduleName":"Control.Plus","name":"Plus","packageInfo":{"tag":"package","value":"control-6.0.0"},"score":0,"sourceSpan":{"end":{"column":25,"line":24},"name":".spago/p/control-6.0.0/src/Control/Plus.purs","start":{"column":1,"line":23}}}]],["mod",[{"hashAnchor":"v","info":{"tag":"typeClassMember","value":{"type":{"tag":"ForAll","annotation":null,"contents":{"visibility":"TypeVarInvisible","identifier":"a","kind":null,"type":{"tag":"ConstrainedType","annotation":null,"contents":[{"constraintAnn":null,"constraintArgs":[{"tag":"TypeVar","annotation":null,"contents":"a"}],"constraintClass":[["Data","EuclideanRing"],"EuclideanRing"],"constraintData":null,"constraintKindArgs":[]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeVar","annotation":null,"contents":"a"}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeVar","annotation":null,"contents":"a"}]},{"tag":"TypeVar","annotation":null,"contents":"a"}]}]}]},"skolem":null}},"typeClass":[["Data","EuclideanRing"],"EuclideanRing"],"typeClassArguments":[{"name":"a"}]}},"moduleName":"Data.EuclideanRing","name":"mod","packageInfo":{"tag":"package","value":"prelude-6.0.1"},"score":0,"sourceSpan":{"end":{"column":21,"line":70},"name":".spago/p/prelude-6.0.1/src/Data/EuclideanRing.purs","start":{"column":3,"line":70}}}]],["modify",[{"comments":"Build by modifying an existing field.\n","hashAnchor":"v","info":{"tag":"value","value":{"tag":"ForAll","annotation":null,"contents":{"visibility":"TypeVarInvisible","identifier":"l","kind":null,"type":{"tag":"ForAll","annotation":null,"contents":{"visibility":"TypeVarInvisible","identifier":"a","kind":null,"type":{"tag":"ForAll","annotation":null,"contents":{"visibility":"TypeVarInvisible","identifier":"b","kind":null,"type":{"tag":"ForAll","annotation":null,"contents":{"visibility":"TypeVarInvisible","identifier":"r","kind":null,"type":{"tag":"ForAll","annotation":null,"contents":{"visibility":"TypeVarInvisible","identifier":"r1","kind":null,"type":{"tag":"ForAll","annotation":null,"contents":{"visibility":"TypeVarInvisible","identifier":"r2","kind":null,"type":{"tag":"ConstrainedType","annotation":null,"contents":[{"constraintAnn":null,"constraintArgs":[{"tag":"TypeVar","annotation":null,"contents":"l"},{"tag":"TypeVar","annotation":null,"contents":"a"},{"tag":"TypeVar","annotation":null,"contents":"r"},{"tag":"TypeVar","annotation":null,"contents":"r1"}],"constraintClass":[["Prim","Row"],"Cons"],"constraintData":null,"constraintKindArgs":[]},{"tag":"ConstrainedType","annotation":null,"contents":[{"constraintAnn":null,"constraintArgs":[{"tag":"TypeVar","annotation":null,"contents":"l"},{"tag":"TypeVar","annotation":null,"contents":"b"},{"tag":"TypeVar","annotation":null,"contents":"r"},{"tag":"TypeVar","annotation":null,"contents":"r2"}],"constraintClass":[["Prim","Row"],"Cons"],"constraintData":null,"constraintKindArgs":[]},{"tag":"ConstrainedType","annotation":null,"contents":[{"constraintAnn":null,"constraintArgs":[{"tag":"TypeVar","annotation":null,"contents":"l"}],"constraintClass":[["Data","Symbol"],"IsSymbol"],"constraintData":null,"constraintKindArgs":[]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Type","Proxy"],"Proxy"]},{"tag":"TypeVar","annotation":null,"contents":"l"}]}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"ParensInType","annotation":null,"contents":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeVar","annotation":null,"contents":"a"}]},{"tag":"TypeVar","annotation":null,"contents":"b"}]}}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Record","Builder"],"Builder"]},{"tag":"ParensInType","annotation":null,"contents":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Record"]},{"tag":"TypeVar","annotation":null,"contents":"r1"}]}}]},{"tag":"ParensInType","annotation":null,"contents":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Record"]},{"tag":"TypeVar","annotation":null,"contents":"r2"}]}}]}]}]}]}]}]},"skolem":null}},"skolem":null}},"skolem":null}},"skolem":null}},"skolem":null}},"skolem":null}}},"moduleName":"Record.Builder","name":"modify","packageInfo":{"tag":"package","value":"record-4.0.0"},"score":0,"sourceSpan":{"end":{"column":37,"line":82},"name":".spago/p/record-4.0.0/src/Record/Builder.purs","start":{"column":1,"line":75}}},{"comments":"Modify a property for a label which is specified using a value-level proxy for\na type-level string.\n\nFor example:\n\n```purescript\nmodify (Proxy :: Proxy \"x\")\n  :: forall r a b. (a -> b) -> { x :: a | r } -> { x :: b | r }\n```\n","hashAnchor":"v","info":{"tag":"value","value":{"tag":"ForAll","annotation":null,"contents":{"visibility":"TypeVarInvisible","identifier":"r1","kind":null,"type":{"tag":"ForAll","annotation":null,"contents":{"visibility":"TypeVarInvisible","identifier":"r2","kind":null,"type":{"tag":"ForAll","annotation":null,"contents":{"visibility":"TypeVarInvisible","identifier":"r","kind":null,"type":{"tag":"ForAll","annotation":null,"contents":{"visibility":"TypeVarInvisible","identifier":"l","kind":null,"type":{"tag":"ForAll","annotation":null,"contents":{"visibility":"TypeVarInvisible","identifier":"a","kind":null,"type":{"tag":"ForAll","annotation":null,"contents":{"visibility":"TypeVarInvisible","identifier":"b","kind":null,"type":{"tag":"ConstrainedType","annotation":null,"contents":[{"constraintAnn":null,"constraintArgs":[{"tag":"TypeVar","annotation":null,"contents":"l"}],"constraintClass":[["Data","Symbol"],"IsSymbol"],"constraintData":null,"constraintKindArgs":[]},{"tag":"ConstrainedType","annotation":null,"contents":[{"constraintAnn":null,"constraintArgs":[{"tag":"TypeVar","annotation":null,"contents":"l"},{"tag":"TypeVar","annotation":null,"contents":"a"},{"tag":"TypeVar","annotation":null,"contents":"r"},{"tag":"TypeVar","annotation":null,"contents":"r1"}],"constraintClass":[["Prim","Row"],"Cons"],"constraintData":null,"constraintKindArgs":[]},{"tag":"ConstrainedType","annotation":null,"contents":[{"constraintAnn":null,"constraintArgs":[{"tag":"TypeVar","annotation":null,"contents":"l"},{"tag":"TypeVar","annotation":null,"contents":"b"},{"tag":"TypeVar","annotation":null,"contents":"r"},{"tag":"TypeVar","annotation":null,"contents":"r2"}],"constraintClass":[["Prim","Row"],"Cons"],"constraintData":null,"constraintKindArgs":[]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Type","Proxy"],"Proxy"]},{"tag":"TypeVar","annotation":null,"contents":"l"}]}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"ParensInType","annotation":null,"contents":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeVar","annotation":null,"contents":"a"}]},{"tag":"TypeVar","annotation":null,"contents":"b"}]}}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Record"]},{"tag":"TypeVar","annotation":null,"contents":"r1"}]}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Record"]},{"tag":"TypeVar","annotation":null,"contents":"r2"}]}]}]}]}]}]}]},"skolem":null}},"skolem":null}},"skolem":null}},"skolem":null}},"skolem":null}},"skolem":null}}},"moduleName":"Record","name":"modify","packageInfo":{"tag":"package","value":"record-4.0.0"},"score":0,"sourceSpan":{"end":{"column":15,"line":82},"name":".spago/p/record-4.0.0/src/Record.purs","start":{"column":1,"line":74}}},{"comments":"Update the value of a mutable reference by applying a function\nto the current value. The updated value is returned.\n","hashAnchor":"v","info":{"tag":"value","value":{"tag":"ForAll","annotation":null,"contents":{"visibility":"TypeVarInvisible","identifier":"s","kind":null,"type":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"ParensInType","annotation":null,"contents":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeVar","annotation":null,"contents":"s"}]},{"tag":"TypeVar","annotation":null,"contents":"s"}]}}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Effect","Ref"],"Ref"]},{"tag":"TypeVar","annotation":null,"contents":"s"}]}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Effect"],"Effect"]},{"tag":"TypeVar","annotation":null,"contents":"s"}]}]}]},"skolem":null}}},"moduleName":"Effect.Ref","name":"modify","packageInfo":{"tag":"package","value":"refs-6.0.0"},"score":0,"sourceSpan":{"end":{"column":50,"line":65},"name":".spago/p/refs-6.0.0/src/Effect/Ref.purs","start":{"column":1,"line":65}}},{"comments":"This combinator unwraps the newtype, applies a monomorphic function to the \ncontained value and wraps the result back in the newtype\n","hashAnchor":"v","info":{"tag":"value","value":{"tag":"ForAll","annotation":null,"contents":{"visibility":"TypeVarInvisible","identifier":"t","kind":null,"type":{"tag":"ForAll","annotation":null,"contents":{"visibility":"TypeVarInvisible","identifier":"a","kind":null,"type":{"tag":"ConstrainedType","annotation":null,"contents":[{"constraintAnn":null,"constraintArgs":[{"tag":"TypeVar","annotation":null,"contents":"t"},{"tag":"TypeVar","annotation":null,"contents":"a"}],"constraintClass":[["Data","Newtype"],"Newtype"],"constraintData":null,"constraintKindArgs":[]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"ParensInType","annotation":null,"contents":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeVar","annotation":null,"contents":"a"}]},{"tag":"TypeVar","annotation":null,"contents":"a"}]}}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeVar","annotation":null,"contents":"t"}]},{"tag":"TypeVar","annotation":null,"contents":"t"}]}]}]},"skolem":null}},"skolem":null}}},"moduleName":"Data.Newtype","name":"modify","packageInfo":{"tag":"package","value":"newtype-5.0.0"},"score":0,"sourceSpan":{"end":{"column":56,"line":60},"name":".spago/p/newtype-5.0.0/src/Data/Newtype.purs","start":{"column":1,"line":60}}},{"comments":"Mutate the element at the specified index using the supplied function.\n","hashAnchor":"v","info":{"tag":"value","value":{"tag":"ForAll","annotation":null,"contents":{"visibility":"TypeVarInvisible","identifier":"h","kind":null,"type":{"tag":"ForAll","annotation":null,"contents":{"visibility":"TypeVarInvisible","identifier":"a","kind":null,"type":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"ParensInType","annotation":null,"contents":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeVar","annotation":null,"contents":"a"}]},{"tag":"TypeVar","annotation":null,"contents":"a"}]}}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Data","Array","ST"],"STArray"]},{"tag":"TypeVar","annotation":null,"contents":"h"}]},{"tag":"TypeVar","annotation":null,"contents":"a"}]}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Control","Monad","ST","Internal"],"ST"]},{"tag":"TypeVar","annotation":null,"contents":"h"}]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Boolean"]}]}]}]}]},"skolem":null}},"skolem":null}}},"moduleName":"Data.Array.ST","name":"modify","packageInfo":{"tag":"package","value":"arrays-7.3.0"},"score":0,"sourceSpan":{"end":{"column":69,"line":231},"name":".spago/p/arrays-7.3.0/src/Data/Array/ST.purs","start":{"column":1,"line":231}}},{"comments":"Modify the value of a mutable reference by applying a function to the\ncurrent value. The modified value is returned.\n","hashAnchor":"v","info":{"tag":"value","value":{"tag":"ForAll","annotation":null,"contents":{"visibility":"TypeVarInvisible","identifier":"r","kind":null,"type":{"tag":"ForAll","annotation":null,"contents":{"visibility":"TypeVarInvisible","identifier":"a","kind":null,"type":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"ParensInType","annotation":null,"contents":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeVar","annotation":null,"contents":"a"}]},{"tag":"TypeVar","annotation":null,"contents":"a"}]}}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Control","Monad","ST","Internal"],"STRef"]},{"tag":"TypeVar","annotation":null,"contents":"r"}]},{"tag":"TypeVar","annotation":null,"contents":"a"}]}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Control","Monad","ST","Internal"],"ST"]},{"tag":"TypeVar","annotation":null,"contents":"r"}]},{"tag":"TypeVar","annotation":null,"contents":"a"}]}]}]},"skolem":null}},"skolem":null}}},"moduleName":"Control.Monad.ST.Internal","name":"modify","packageInfo":{"tag":"package","value":"st-6.2.0"},"score":0,"sourceSpan":{"end":{"column":54,"line":132},"name":".spago/p/st-6.2.0/src/Control/Monad/ST/Internal.purs","start":{"column":1,"line":132}}}]],["modify'",[{"comments":"Update the value of a mutable reference by applying a function\nto the current value.\n","hashAnchor":"v","info":{"tag":"value","value":{"tag":"ForAll","annotation":null,"contents":{"visibility":"TypeVarInvisible","identifier":"s","kind":null,"type":{"tag":"ForAll","annotation":null,"contents":{"visibility":"TypeVarInvisible","identifier":"b","kind":null,"type":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"ParensInType","annotation":null,"contents":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeVar","annotation":null,"contents":"s"}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Record"]},{"tag":"RCons","annotation":null,"contents":["\u0000s\u0000t\u0000a\u0000t\u0000e",{"tag":"TypeVar","annotation":null,"contents":"s"},{"tag":"RCons","annotation":null,"contents":["\u0000v\u0000a\u0000l\u0000u\u0000e",{"tag":"TypeVar","annotation":null,"contents":"b"},{"tag":"REmpty","annotation":null}]}]}]}]}}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Effect","Ref"],"Ref"]},{"tag":"TypeVar","annotation":null,"contents":"s"}]}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Effect"],"Effect"]},{"tag":"TypeVar","annotation":null,"contents":"b"}]}]}]},"skolem":null}},"skolem":null}}},"moduleName":"Effect.Ref","name":"modify'","packageInfo":{"tag":"package","value":"refs-6.0.0"},"score":0,"sourceSpan":{"end":{"column":78,"line":58},"name":".spago/p/refs-6.0.0/src/Effect/Ref.purs","start":{"column":1,"line":58}}},{"comments":"Update the value of a mutable reference by applying a function\nto the current value, computing a new state value for the reference and\na return value.\n","hashAnchor":"v","info":{"tag":"value","value":{"tag":"ForAll","annotation":null,"contents":{"visibility":"TypeVarInvisible","identifier":"r","kind":null,"type":{"tag":"ForAll","annotation":null,"contents":{"visibility":"TypeVarInvisible","identifier":"a","kind":null,"type":{"tag":"ForAll","annotation":null,"contents":{"visibility":"TypeVarInvisible","identifier":"b","kind":null,"type":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"ParensInType","annotation":null,"contents":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeVar","annotation":null,"contents":"a"}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Record"]},{"tag":"RCons","annotation":null,"contents":["\u0000s\u0000t\u0000a\u0000t\u0000e",{"tag":"TypeVar","annotation":null,"contents":"a"},{"tag":"RCons","annotation":null,"contents":["\u0000v\u0000a\u0000l\u0000u\u0000e",{"tag":"TypeVar","annotation":null,"contents":"b"},{"tag":"REmpty","annotation":null}]}]}]}]}}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Control","Monad","ST","Internal"],"STRef"]},{"tag":"TypeVar","annotation":null,"contents":"r"}]},{"tag":"TypeVar","annotation":null,"contents":"a"}]}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Control","Monad","ST","Internal"],"ST"]},{"tag":"TypeVar","annotation":null,"contents":"r"}]},{"tag":"TypeVar","annotation":null,"contents":"b"}]}]}]},"skolem":null}},"skolem":null}},"skolem":null}}},"moduleName":"Control.Monad.ST.Internal","name":"modify'","packageInfo":{"tag":"package","value":"st-6.2.0"},"score":0,"sourceSpan":{"end":{"column":82,"line":125},"name":".spago/p/st-6.2.0/src/Control/Monad/ST/Internal.purs","start":{"column":1,"line":125}}}]],["modify_",[{"comments":"A version of `modify` which does not return the updated value.\n","hashAnchor":"v","info":{"tag":"value","value":{"tag":"ForAll","annotation":null,"contents":{"visibility":"TypeVarInvisible","identifier":"s","kind":null,"type":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"ParensInType","annotation":null,"contents":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeVar","annotation":null,"contents":"s"}]},{"tag":"TypeVar","annotation":null,"contents":"s"}]}}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Effect","Ref"],"Ref"]},{"tag":"TypeVar","annotation":null,"contents":"s"}]}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Effect"],"Effect"]},{"tag":"TypeConstructor","annotation":null,"contents":[["Data","Unit"],"Unit"]}]}]}]},"skolem":null}}},"moduleName":"Effect.Ref","name":"modify_","packageInfo":{"tag":"package","value":"refs-6.0.0"},"score":0,"sourceSpan":{"end":{"column":54,"line":69},"name":".spago/p/refs-6.0.0/src/Effect/Ref.purs","start":{"column":1,"line":69}}}]],["modifyat",[{"hashAnchor":"v","info":{"tag":"value","value":{"tag":"ForAll","annotation":null,"contents":{"visibility":"TypeVarInvisible","identifier":"a","kind":null,"type":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"ParensInType","annotation":null,"contents":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeVar","annotation":null,"contents":"a"}]},{"tag":"TypeVar","annotation":null,"contents":"a"}]}}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Data","List","Types"],"NonEmptyList"]},{"tag":"TypeVar","annotation":null,"contents":"a"}]}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Data","Maybe"],"Maybe"]},{"tag":"ParensInType","annotation":null,"contents":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Data","List","Types"],"NonEmptyList"]},{"tag":"TypeVar","annotation":null,"contents":"a"}]}}]}]}]}]},"skolem":null}}},"moduleName":"Data.List.NonEmpty","name":"modifyAt","packageInfo":{"tag":"package","value":"lists-7.0.0"},"score":0,"sourceSpan":{"end":{"column":82,"line":203},"name":".spago/p/lists-7.0.0/src/Data/List/NonEmpty.purs","start":{"column":1,"line":203}}},{"comments":"Update the element at the specified index by applying a function to\nthe current value, returning a new list, or return the original list unchanged\nif the index is out-of-bounds.\n\nRunning time: `O(n)`\n","hashAnchor":"v","info":{"tag":"value","value":{"tag":"ForAll","annotation":null,"contents":{"visibility":"TypeVarInvisible","identifier":"a","kind":null,"type":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"ParensInType","annotation":null,"contents":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeVar","annotation":null,"contents":"a"}]},{"tag":"TypeVar","annotation":null,"contents":"a"}]}}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Data","List","Lazy","Types"],"List"]},{"tag":"TypeVar","annotation":null,"contents":"a"}]}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Data","List","Lazy","Types"],"List"]},{"tag":"TypeVar","annotation":null,"contents":"a"}]}]}]}]},"skolem":null}}},"moduleName":"Data.List.Lazy","name":"modifyAt","packageInfo":{"tag":"package","value":"lists-7.0.0"},"score":0,"sourceSpan":{"end":{"column":58,"line":370},"name":".spago/p/lists-7.0.0/src/Data/List/Lazy.purs","start":{"column":1,"line":370}}},{"comments":"Update the element at the specified index by applying a function to\nthe current value, returning a new list or `Nothing` if the index is\nout-of-bounds.\n\nRunning time: `O(n)`\n","hashAnchor":"v","info":{"tag":"value","value":{"tag":"ForAll","annotation":null,"contents":{"visibility":"TypeVarInvisible","identifier":"a","kind":null,"type":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"ParensInType","annotation":null,"contents":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeVar","annotation":null,"contents":"a"}]},{"tag":"TypeVar","annotation":null,"contents":"a"}]}}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Data","List","Types"],"List"]},{"tag":"TypeVar","annotation":null,"contents":"a"}]}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Data","Maybe"],"Maybe"]},{"tag":"ParensInType","annotation":null,"contents":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Data","List","Types"],"List"]},{"tag":"TypeVar","annotation":null,"contents":"a"}]}}]}]}]}]},"skolem":null}}},"moduleName":"Data.List","name":"modifyAt","packageInfo":{"tag":"package","value":"lists-7.0.0"},"score":0,"sourceSpan":{"end":{"column":66,"line":342},"name":".spago/p/lists-7.0.0/src/Data/List.purs","start":{"column":1,"line":342}}},{"hashAnchor":"v","info":{"tag":"value","value":{"tag":"ForAll","annotation":null,"contents":{"visibility":"TypeVarInvisible","identifier":"a","kind":null,"type":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"ParensInType","annotation":null,"contents":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeVar","annotation":null,"contents":"a"}]},{"tag":"TypeVar","annotation":null,"contents":"a"}]}}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Data","Array","NonEmpty","Internal"],"NonEmptyArray"]},{"tag":"TypeVar","annotation":null,"contents":"a"}]}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Data","Maybe"],"Maybe"]},{"tag":"ParensInType","annotation":null,"contents":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Data","Array","NonEmpty","Internal"],"NonEmptyArray"]},{"tag":"TypeVar","annotation":null,"contents":"a"}]}}]}]}]}]},"skolem":null}}},"moduleName":"Data.Array.NonEmpty","name":"modifyAt","packageInfo":{"tag":"package","value":"arrays-7.3.0"},"score":0,"sourceSpan":{"end":{"column":84,"line":305},"name":".spago/p/arrays-7.3.0/src/Data/Array/NonEmpty.purs","start":{"column":1,"line":305}}},{"comments":"Apply a function to the element at the specified index, creating a new\narray, or returning `Nothing` if the index is out of bounds.\n\n```purescript\nmodifyAt 1 toUpper [\"Hello\", \"World\"] = Just [\"Hello\", \"WORLD\"]\nmodifyAt 10 toUpper [\"Hello\", \"World\"] = Nothing\n```\n\n","hashAnchor":"v","info":{"tag":"value","value":{"tag":"ForAll","annotation":null,"contents":{"visibility":"TypeVarInvisible","identifier":"a","kind":null,"type":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"ParensInType","annotation":null,"contents":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeVar","annotation":null,"contents":"a"}]},{"tag":"TypeVar","annotation":null,"contents":"a"}]}}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Array"]},{"tag":"TypeVar","annotation":null,"contents":"a"}]}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Data","Maybe"],"Maybe"]},{"tag":"ParensInType","annotation":null,"contents":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Array"]},{"tag":"TypeVar","annotation":null,"contents":"a"}]}}]}]}]}]},"skolem":null}}},"moduleName":"Data.Array","name":"modifyAt","packageInfo":{"tag":"package","value":"arrays-7.3.0"},"score":0,"sourceSpan":{"end":{"column":68,"line":579},"name":".spago/p/arrays-7.3.0/src/Data/Array.purs","start":{"column":1,"line":579}}}]],["modifyatindices",[{"hashAnchor":"v","info":{"tag":"value","value":{"tag":"ForAll","annotation":null,"contents":{"visibility":"TypeVarInvisible","identifier":"t","kind":null,"type":{"tag":"ForAll","annotation":null,"contents":{"visibility":"TypeVarInvisible","identifier":"a","kind":null,"type":{"tag":"ConstrainedType","annotation":null,"contents":[{"constraintAnn":null,"constraintArgs":[{"tag":"TypeVar","annotation":null,"contents":"t"}],"constraintClass":[["Data","Foldable"],"Foldable"],"constraintData":null,"constraintKindArgs":[]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeVar","annotation":null,"contents":"t"},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Int"]}]}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"ParensInType","annotation":null,"contents":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeVar","annotation":null,"contents":"a"}]},{"tag":"TypeVar","annotation":null,"contents":"a"}]}}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Data","Array","NonEmpty","Internal"],"NonEmptyArray"]},{"tag":"TypeVar","annotation":null,"contents":"a"}]}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Data","Array","NonEmpty","Internal"],"NonEmptyArray"]},{"tag":"TypeVar","annotation":null,"contents":"a"}]}]}]}]}]},"skolem":null}},"skolem":null}}},"moduleName":"Data.Array.NonEmpty","name":"modifyAtIndices","packageInfo":{"tag":"package","value":"arrays-7.3.0"},"score":0,"sourceSpan":{"end":{"column":101,"line":308},"name":".spago/p/arrays-7.3.0/src/Data/Array/NonEmpty.purs","start":{"column":1,"line":308}}},{"comments":"Apply a function to the element at the specified indices,\ncreating a new array. Out-of-bounds indices will have no effect.\n\n```purescript\nindices = [1, 3]\nmodifyAtIndices indices toUpper [\"Hello\", \"World\", \"and\", \"others\"]\n   = [\"Hello\", \"WORLD\", \"and\", \"OTHERS\"]\n```\n\n","hashAnchor":"v","info":{"tag":"value","value":{"tag":"ForAll","annotation":null,"contents":{"visibility":"TypeVarInvisible","identifier":"t","kind":null,"type":{"tag":"ForAll","annotation":null,"contents":{"visibility":"TypeVarInvisible","identifier":"a","kind":null,"type":{"tag":"ConstrainedType","annotation":null,"contents":[{"constraintAnn":null,"constraintArgs":[{"tag":"TypeVar","annotation":null,"contents":"t"}],"constraintClass":[["Data","Foldable"],"Foldable"],"constraintData":null,"constraintKindArgs":[]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeVar","annotation":null,"contents":"t"},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Int"]}]}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"ParensInType","annotation":null,"contents":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeVar","annotation":null,"contents":"a"}]},{"tag":"TypeVar","annotation":null,"contents":"a"}]}}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Array"]},{"tag":"TypeVar","annotation":null,"contents":"a"}]}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Array"]},{"tag":"TypeVar","annotation":null,"contents":"a"}]}]}]}]}]},"skolem":null}},"skolem":null}}},"moduleName":"Data.Array","name":"modifyAtIndices","packageInfo":{"tag":"package","value":"arrays-7.3.0"},"score":0,"sourceSpan":{"end":{"column":85,"line":787},"name":".spago/p/arrays-7.3.0/src/Data/Array.purs","start":{"column":1,"line":787}}}]],["monad",[{"comments":"The `Monad` type class combines the operations of the `Bind` and\n`Applicative` type classes. Therefore, `Monad` instances represent type\nconstructors which support sequential composition, and also lifting of\nfunctions of arbitrary arity.\n\nInstances must satisfy the following laws in addition to the\n`Applicative` and `Bind` laws:\n\n- Left Identity: `pure x >>= f = f x`\n- Right Identity: `x >>= pure = x`\n","hashAnchor":"t","info":{"tag":"typeClass","value":{"arguments":[{"name":"m"}],"fundeps":[],"superclasses":[{"constraintAnn":null,"constraintArgs":[{"tag":"TypeVar","annotation":null,"contents":"m"}],"constraintClass":[["Control","Applicative"],"Applicative"],"constraintData":null,"constraintKindArgs":[]},{"constraintAnn":null,"constraintArgs":[{"tag":"TypeVar","annotation":null,"contents":"m"}],"constraintClass":[["Control","Bind"],"Bind"],"constraintData":null,"constraintKindArgs":[]}]}},"moduleName":"Control.Monad","name":"Monad","packageInfo":{"tag":"package","value":"prelude-6.0.1"},"score":0,"sourceSpan":{"end":{"column":41,"line":31},"name":".spago/p/prelude-6.0.1/src/Control/Monad.purs","start":{"column":1,"line":31}}}]],["monadeffect",[{"comments":"The `MonadEffect` class captures those monads which support native effects.\n\nInstances are provided for `Effect` itself, and the standard monad\ntransformers.\n\n`liftEffect` can be used in any appropriate monad transformer stack to lift an\naction of type `Effect a` into the monad.\n\n","hashAnchor":"t","info":{"tag":"typeClass","value":{"arguments":[{"name":"m"}],"fundeps":[],"superclasses":[{"constraintAnn":null,"constraintArgs":[{"tag":"TypeVar","annotation":null,"contents":"m"}],"constraintClass":[["Control","Monad"],"Monad"],"constraintData":null,"constraintKindArgs":[]}]}},"moduleName":"Effect.Class","name":"MonadEffect","packageInfo":{"tag":"package","value":"effect-4.0.0"},"score":0,"sourceSpan":{"end":{"column":42,"line":16},"name":".spago/p/effect-4.0.0/src/Effect/Class.purs","start":{"column":1,"line":15}}}]],["monadgen",[{"comments":"A class for random generator implementations.\n\nInstances should provide implementations for the generation functions\nthat return choices with uniform probability.\n\nSee also `Gen` in `purescript-quickcheck`, which implements this\ntype class.\n","hashAnchor":"t","info":{"tag":"typeClass","value":{"arguments":[{"name":"m"}],"fundeps":[],"superclasses":[{"constraintAnn":null,"constraintArgs":[{"tag":"TypeVar","annotation":null,"contents":"m"}],"constraintClass":[["Control","Monad"],"Monad"],"constraintData":null,"constraintKindArgs":[]}]}},"moduleName":"Control.Monad.Gen.Class","name":"MonadGen","packageInfo":{"tag":"package","value":"gen-4.0.0"},"score":0,"sourceSpan":{"end":{"column":42,"line":27},"name":".spago/p/gen-4.0.0/src/Control/Monad/Gen/Class.purs","start":{"column":1,"line":12}}}]],["monadplus",[{"comments":"The `MonadPlus` type class has no members of its own; it just specifies\nthat the type has both `Monad` and `Alternative` instances.\n\nTypes which have `MonadPlus` instances should also satisfy the following\nlaw:\n\n- Distributivity: `(x <|> y) >>= f == (x >>= f) <|> (y >>= f)`\n","hashAnchor":"t","info":{"tag":"typeClass","value":{"arguments":[{"name":"m"}],"fundeps":[],"superclasses":[{"constraintAnn":null,"constraintArgs":[{"tag":"TypeVar","annotation":null,"contents":"m"}],"constraintClass":[["Control","Monad"],"Monad"],"constraintData":null,"constraintKindArgs":[]},{"constraintAnn":null,"constraintArgs":[{"tag":"TypeVar","annotation":null,"contents":"m"}],"constraintClass":[["Control","Alternative"],"Alternative"],"constraintData":null,"constraintKindArgs":[]}]}},"moduleName":"Control.MonadPlus","name":"MonadPlus","packageInfo":{"tag":"package","value":"control-6.0.0"},"score":0,"sourceSpan":{"end":{"column":46,"line":30},"name":".spago/p/control-6.0.0/src/Control/MonadPlus.purs","start":{"column":1,"line":30}}}]],["monadrec",[{"comments":"This type class captures those monads which support tail recursion in\nconstant stack space.\n\nThe `tailRecM` function takes a step function, and applies that step\nfunction recursively until a pure value of type `b` is found.\n\nInstances are provided for standard monad transformers.\n\nFor example:\n\n```purescript\nloopWriter :: Int -> WriterT (Additive Int) Effect Unit\nloopWriter n = tailRecM go n\n  where\n  go 0 = do\n    traceM \"Done!\"\n    pure (Done unit)\n  go i = do\n    tell $ Additive i\n    pure (Loop (i - 1))\n```\n","hashAnchor":"t","info":{"tag":"typeClass","value":{"arguments":[{"name":"m"}],"fundeps":[],"superclasses":[{"constraintAnn":null,"constraintArgs":[{"tag":"TypeVar","annotation":null,"contents":"m"}],"constraintClass":[["Control","Monad"],"Monad"],"constraintData":null,"constraintKindArgs":[]}]}},"moduleName":"Control.Monad.Rec.Class","name":"MonadRec","packageInfo":{"tag":"package","value":"tailrec-6.1.0"},"score":0,"sourceSpan":{"end":{"column":58,"line":59},"name":".spago/p/tailrec-6.1.0/src/Control/Monad/Rec/Class.purs","start":{"column":1,"line":58}}}]],["monadst",[{"hashAnchor":"t","info":{"tag":"typeClass","value":{"arguments":[{"name":"s"},{"name":"m"}],"fundeps":[[["m"],["s"]]],"superclasses":[{"constraintAnn":null,"constraintArgs":[{"tag":"TypeVar","annotation":null,"contents":"m"}],"constraintClass":[["Control","Monad"],"Monad"],"constraintData":null,"constraintKindArgs":[]}]}},"moduleName":"Control.Monad.ST.Class","name":"MonadST","packageInfo":{"tag":"package","value":"st-6.2.0"},"score":0,"sourceSpan":{"end":{"column":22,"line":11},"name":".spago/p/st-6.2.0/src/Control/Monad/ST/Class.purs","start":{"column":1,"line":10}}}]],["monoid",[{"comments":"A `Monoid` is a `Semigroup` with a value `mempty`, which is both a\nleft and right unit for the associative operation `<>`:\n\n- Left unit: `(mempty <> x) = x`\n- Right unit: `(x <> mempty) = x`\n\n`Monoid`s are commonly used as the result of fold operations, where\n`<>` is used to combine individual results, and `mempty` gives the result\nof folding an empty collection of elements.\n\n### Newtypes for Monoid\n\nSome types (e.g. `Int`, `Boolean`) can implement multiple law-abiding\ninstances for `Monoid`. Let's use `Int` as an example\n1. `<>` could be `+` and `mempty` could be `0`\n2. `<>` could be `*` and `mempty` could be `1`.\n\nTo clarify these ambiguous situations, one should use the newtypes\ndefined in `Data.Monoid.<NewtypeName>` modules.\n\nIn the above ambiguous situation, we could use `Additive`\nfor the first situation or `Multiplicative` for the second one.\n","hashAnchor":"t","info":{"tag":"typeClass","value":{"arguments":[{"name":"m"}],"fundeps":[],"superclasses":[{"constraintAnn":null,"constraintArgs":[{"tag":"TypeVar","annotation":null,"contents":"m"}],"constraintClass":[["Data","Semigroup"],"Semigroup"],"constraintData":null,"constraintKindArgs":[]}]}},"moduleName":"Data.Monoid","name":"Monoid","packageInfo":{"tag":"package","value":"prelude-6.0.1"},"score":0,"sourceSpan":{"end":{"column":14,"line":47},"name":".spago/p/prelude-6.0.1/src/Data/Monoid.purs","start":{"column":1,"line":46}}}]],["monoidrecord",[{"comments":"A class for records where all fields have `Monoid` instances, used to\nimplement the `Monoid` instance for records.\n","hashAnchor":"t","info":{"tag":"typeClass","value":{"arguments":[{"name":"rowlist"},{"name":"row"},{"name":"subrow"}],"fundeps":[[["rowlist"],["row","subrow"]]],"superclasses":[{"constraintAnn":null,"constraintArgs":[{"tag":"TypeVar","annotation":null,"contents":"rowlist"},{"tag":"TypeVar","annotation":null,"contents":"row"},{"tag":"TypeVar","annotation":null,"contents":"subrow"}],"constraintClass":[["Data","Semigroup"],"SemigroupRecord"],"constraintData":null,"constraintKindArgs":[]}]}},"moduleName":"Data.Monoid","name":"MonoidRecord","packageInfo":{"tag":"package","value":"prelude-6.0.1"},"score":0,"sourceSpan":{"end":{"column":49,"line":104},"name":".spago/p/prelude-6.0.1/src/Data/Monoid.purs","start":{"column":1,"line":103}}}]],["isarray",[{"comments":"Check if the provided `Json` is an `Array`\n","hashAnchor":"v","info":{"tag":"value","value":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","annotation":null,"contents":[["Data","Argonaut","Core"],"Json"]}]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Boolean"]}]}},"moduleName":"Data.Argonaut.Core","name":"isArray","packageInfo":{"tag":"package","value":"argonaut-core-7.0.0"},"score":0,"sourceSpan":{"end":{"column":27,"line":140},"name":".spago/p/argonaut-core-7.0.0/src/Data/Argonaut/Core.purs","start":{"column":1,"line":140}}}]],["isboolean",[{"comments":"Class for reflecting a type level `Boolean` at the value level\n","hashAnchor":"t","info":{"tag":"typeClass","value":{"arguments":[{"name":"bool"}],"fundeps":[],"superclasses":[]}},"moduleName":"Type.Data.Boolean","name":"IsBoolean","packageInfo":{"tag":"package","value":"typelevel-prelude-7.0.0"},"score":0,"sourceSpan":{"end":{"column":42,"line":22},"name":".spago/p/typelevel-prelude-7.0.0/src/Type/Data/Boolean.purs","start":{"column":1,"line":21}}},{"comments":"Check if the provided `Json` is a `Boolean`\n","hashAnchor":"v","info":{"tag":"value","value":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","annotation":null,"contents":[["Data","Argonaut","Core"],"Json"]}]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Boolean"]}]}},"moduleName":"Data.Argonaut.Core","name":"isBoolean","packageInfo":{"tag":"package","value":"argonaut-core-7.0.0"},"score":0,"sourceSpan":{"end":{"column":29,"line":128},"name":".spago/p/argonaut-core-7.0.0/src/Data/Argonaut/Core.purs","start":{"column":1,"line":128}}}]],["isempty",[{"comments":"Test whether a map is empty\n","hashAnchor":"v","info":{"tag":"value","value":{"tag":"ForAll","annotation":null,"contents":{"visibility":"TypeVarInvisible","identifier":"a","kind":null,"type":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Foreign","Object"],"Object"]},{"tag":"TypeVar","annotation":null,"contents":"a"}]}]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Boolean"]}]},"skolem":null}}},"moduleName":"Foreign.Object","name":"isEmpty","packageInfo":{"tag":"package","value":"foreign-object-4.1.0"},"score":0,"sourceSpan":{"end":{"column":41,"line":175},"name":".spago/p/foreign-object-4.1.0/src/Foreign/Object.purs","start":{"column":1,"line":175}}},{"comments":"Test if a set is empty\n","hashAnchor":"v","info":{"tag":"value","value":{"tag":"ForAll","annotation":null,"contents":{"visibility":"TypeVarInvisible","identifier":"a","kind":null,"type":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Data","Set"],"Set"]},{"tag":"TypeVar","annotation":null,"contents":"a"}]}]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Boolean"]}]},"skolem":null}}},"moduleName":"Data.Set","name":"isEmpty","packageInfo":{"tag":"package","value":"ordered-collections-3.2.0"},"score":0,"sourceSpan":{"end":{"column":38,"line":92},"name":".spago/p/ordered-collections-3.2.0/src/Data/Set.purs","start":{"column":1,"line":92}}},{"comments":"Test if a map is empty\n","hashAnchor":"v","info":{"tag":"value","value":{"tag":"ForAll","annotation":null,"contents":{"visibility":"TypeVarInvisible","identifier":"k","kind":null,"type":{"tag":"ForAll","annotation":null,"contents":{"visibility":"TypeVarInvisible","identifier":"v","kind":null,"type":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Data","Map","Internal"],"Map"]},{"tag":"TypeVar","annotation":null,"contents":"k"}]},{"tag":"TypeVar","annotation":null,"contents":"v"}]}]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Boolean"]}]},"skolem":null}},"skolem":null}}},"moduleName":"Data.Map.Internal","name":"isEmpty","packageInfo":{"tag":"package","value":"ordered-collections-3.2.0"},"score":0,"sourceSpan":{"end":{"column":42,"line":245},"name":".spago/p/ordered-collections-3.2.0/src/Data/Map/Internal.purs","start":{"column":1,"line":245}}}]],["isfinite",[{"comments":"Test whether a number is finite.\n```purs\n> isFinite 0.0\ntrue\n\n> isFinite infinity\nfalse\n\n> isFinite (-infinity)\nfalse\n\n> isFinite nan\nfalse\n```\n","hashAnchor":"v","info":{"tag":"value","value":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Number"]}]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Boolean"]}]}},"moduleName":"Data.Number","name":"isFinite","packageInfo":{"tag":"package","value":"numbers-9.0.1"},"score":0,"sourceSpan":{"end":{"column":45,"line":83},"name":".spago/p/numbers-9.0.1/src/Data/Number.purs","start":{"column":1,"line":83}}}]],["isjust",[{"comments":"Returns `true` when the `Maybe` value was constructed with `Just`.\n","hashAnchor":"v","info":{"tag":"value","value":{"tag":"ForAll","annotation":null,"contents":{"visibility":"TypeVarInvisible","identifier":"a","kind":null,"type":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","annotation":null,"contents":"a"}]}]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Boolean"]}]},"skolem":null}}},"moduleName":"Data.Maybe","name":"isJust","packageInfo":{"tag":"package","value":"maybe-6.0.0"},"score":0,"sourceSpan":{"end":{"column":39,"line":278},"name":".spago/p/maybe-6.0.0/src/Data/Maybe.purs","start":{"column":1,"line":278}}}]],["isleft",[{"comments":"Returns `true` when the `Either` value was constructed with `Left`.\n","hashAnchor":"v","info":{"tag":"value","value":{"tag":"ForAll","annotation":null,"contents":{"visibility":"TypeVarInvisible","identifier":"a","kind":null,"type":{"tag":"ForAll","annotation":null,"contents":{"visibility":"TypeVarInvisible","identifier":"b","kind":null,"type":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Data","Either"],"Either"]},{"tag":"TypeVar","annotation":null,"contents":"a"}]},{"tag":"TypeVar","annotation":null,"contents":"b"}]}]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Boolean"]}]},"skolem":null}},"skolem":null}}},"moduleName":"Data.Either","name":"isLeft","packageInfo":{"tag":"package","value":"either-6.1.0"},"score":0,"sourceSpan":{"end":{"column":44,"line":217},"name":".spago/p/either-6.1.0/src/Data/Either.purs","start":{"column":1,"line":217}}}]],["isnan",[{"comments":"Test whether a number is NaN.\n```purs\n> isNaN 0.0\nfalse\n\n> isNaN nan\ntrue\n```\n","hashAnchor":"v","info":{"tag":"value","value":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Number"]}]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Boolean"]}]}},"moduleName":"Data.Number","name":"isNaN","packageInfo":{"tag":"package","value":"numbers-9.0.1"},"score":0,"sourceSpan":{"end":{"column":42,"line":57},"name":".spago/p/numbers-9.0.1/src/Data/Number.purs","start":{"column":1,"line":57}}}]],["isnothing",[{"comments":"Returns `true` when the `Maybe` value is `Nothing`.\n","hashAnchor":"v","info":{"tag":"value","value":{"tag":"ForAll","annotation":null,"contents":{"visibility":"TypeVarInvisible","identifier":"a","kind":null,"type":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","annotation":null,"contents":"a"}]}]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Boolean"]}]},"skolem":null}}},"moduleName":"Data.Maybe","name":"isNothing","packageInfo":{"tag":"package","value":"maybe-6.0.0"},"score":0,"sourceSpan":{"end":{"column":42,"line":282},"name":".spago/p/maybe-6.0.0/src/Data/Maybe.purs","start":{"column":1,"line":282}}}]],["isnull",[{"comments":"Check if the provided `Json` is the `null` value\n","hashAnchor":"v","info":{"tag":"value","value":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","annotation":null,"contents":[["Data","Argonaut","Core"],"Json"]}]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Boolean"]}]}},"moduleName":"Data.Argonaut.Core","name":"isNull","packageInfo":{"tag":"package","value":"argonaut-core-7.0.0"},"score":0,"sourceSpan":{"end":{"column":26,"line":124},"name":".spago/p/argonaut-core-7.0.0/src/Data/Argonaut/Core.purs","start":{"column":1,"line":124}}}]],["isnumber",[{"comments":"Check if the provided `Json` is a `Number`\n","hashAnchor":"v","info":{"tag":"value","value":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","annotation":null,"contents":[["Data","Argonaut","Core"],"Json"]}]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Boolean"]}]}},"moduleName":"Data.Argonaut.Core","name":"isNumber","packageInfo":{"tag":"package","value":"argonaut-core-7.0.0"},"score":0,"sourceSpan":{"end":{"column":28,"line":132},"name":".spago/p/argonaut-core-7.0.0/src/Data/Argonaut/Core.purs","start":{"column":1,"line":132}}}]],["isobject",[{"comments":"Check if the provided `Json` is an `Object`\n","hashAnchor":"v","info":{"tag":"value","value":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","annotation":null,"contents":[["Data","Argonaut","Core"],"Json"]}]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Boolean"]}]}},"moduleName":"Data.Argonaut.Core","name":"isObject","packageInfo":{"tag":"package","value":"argonaut-core-7.0.0"},"score":0,"sourceSpan":{"end":{"column":28,"line":144},"name":".spago/p/argonaut-core-7.0.0/src/Data/Argonaut/Core.purs","start":{"column":1,"line":144}}}]],["isordering",[{"comments":"Class for reflecting a type level `Ordering` at the value level\n","hashAnchor":"t","info":{"tag":"typeClass","value":{"arguments":[{"name":"ordering"}],"fundeps":[],"superclasses":[]}},"moduleName":"Type.Data.Ordering","name":"IsOrdering","packageInfo":{"tag":"package","value":"typelevel-prelude-7.0.0"},"score":0,"sourceSpan":{"end":{"column":48,"line":22},"name":".spago/p/typelevel-prelude-7.0.0/src/Type/Data/Ordering.purs","start":{"column":1,"line":21}}}]],["isright",[{"comments":"Returns `true` when the `Either` value was constructed with `Right`.\n","hashAnchor":"v","info":{"tag":"value","value":{"tag":"ForAll","annotation":null,"contents":{"visibility":"TypeVarInvisible","identifier":"a","kind":null,"type":{"tag":"ForAll","annotation":null,"contents":{"visibility":"TypeVarInvisible","identifier":"b","kind":null,"type":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Data","Either"],"Either"]},{"tag":"TypeVar","annotation":null,"contents":"a"}]},{"tag":"TypeVar","annotation":null,"contents":"b"}]}]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Boolean"]}]},"skolem":null}},"skolem":null}}},"moduleName":"Data.Either","name":"isRight","packageInfo":{"tag":"package","value":"either-6.1.0"},"score":0,"sourceSpan":{"end":{"column":45,"line":221},"name":".spago/p/either-6.1.0/src/Data/Either.purs","start":{"column":1,"line":221}}}]],["isstring",[{"comments":"Check if the provided `Json` is a `String`\n","hashAnchor":"v","info":{"tag":"value","value":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","annotation":null,"contents":[["Data","Argonaut","Core"],"Json"]}]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Boolean"]}]}},"moduleName":"Data.Argonaut.Core","name":"isString","packageInfo":{"tag":"package","value":"argonaut-core-7.0.0"},"score":0,"sourceSpan":{"end":{"column":28,"line":136},"name":".spago/p/argonaut-core-7.0.0/src/Data/Argonaut/Core.purs","start":{"column":1,"line":136}}}]],["issubmap",[{"comments":"Test whether one map contains all of the keys and values contained in another map\n","hashAnchor":"v","info":{"tag":"value","value":{"tag":"ForAll","annotation":null,"contents":{"visibility":"TypeVarInvisible","identifier":"a","kind":null,"type":{"tag":"ConstrainedType","annotation":null,"contents":[{"constraintAnn":null,"constraintArgs":[{"tag":"TypeVar","annotation":null,"contents":"a"}],"constraintClass":[["Data","Eq"],"Eq"],"constraintData":null,"constraintKindArgs":[]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Foreign","Object"],"Object"]},{"tag":"TypeVar","annotation":null,"contents":"a"}]}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Foreign","Object"],"Object"]},{"tag":"TypeVar","annotation":null,"contents":"a"}]}]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Boolean"]}]}]}]},"skolem":null}}},"moduleName":"Foreign.Object","name":"isSubmap","packageInfo":{"tag":"package","value":"foreign-object-4.1.0"},"score":0,"sourceSpan":{"end":{"column":62,"line":170},"name":".spago/p/foreign-object-4.1.0/src/Foreign/Object.purs","start":{"column":1,"line":170}}},{"comments":"Test whether one map contains all of the keys and values contained in another map\n","hashAnchor":"v","info":{"tag":"value","value":{"tag":"ForAll","annotation":null,"contents":{"visibility":"TypeVarInvisible","identifier":"k","kind":null,"type":{"tag":"ForAll","annotation":null,"contents":{"visibility":"TypeVarInvisible","identifier":"v","kind":null,"type":{"tag":"ConstrainedType","annotation":null,"contents":[{"constraintAnn":null,"constraintArgs":[{"tag":"TypeVar","annotation":null,"contents":"k"}],"constraintClass":[["Data","Ord"],"Ord"],"constraintData":null,"constraintKindArgs":[]},{"tag":"ConstrainedType","annotation":null,"contents":[{"constraintAnn":null,"constraintArgs":[{"tag":"TypeVar","annotation":null,"contents":"v"}],"constraintClass":[["Data","Eq"],"Eq"],"constraintData":null,"constraintKindArgs":[]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Data","Map","Internal"],"Map"]},{"tag":"TypeVar","annotation":null,"contents":"k"}]},{"tag":"TypeVar","annotation":null,"contents":"v"}]}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Data","Map","Internal"],"Map"]},{"tag":"TypeVar","annotation":null,"contents":"k"}]},{"tag":"TypeVar","annotation":null,"contents":"v"}]}]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Boolean"]}]}]}]}]},"skolem":null}},"skolem":null}}},"moduleName":"Data.Map.Internal","name":"isSubmap","packageInfo":{"tag":"package","value":"ordered-collections-3.2.0"},"score":0,"sourceSpan":{"end":{"column":71,"line":605},"name":".spago/p/ordered-collections-3.2.0/src/Data/Map/Internal.purs","start":{"column":1,"line":605}}}]],["issymbol",[{"comments":"A class for known symbols\n","hashAnchor":"t","info":{"tag":"typeClass","value":{"arguments":[{"kind":{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Symbol"]},"name":"sym"}],"fundeps":[],"superclasses":[]}},"moduleName":"Data.Symbol","name":"IsSymbol","packageInfo":{"tag":"package","value":"prelude-6.0.1"},"score":0,"sourceSpan":{"end":{"column":39,"line":11},"name":".spago/p/prelude-6.0.1/src/Data/Symbol.purs","start":{"column":1,"line":10}}}]],["guard",[{"comments":"Allow or \"truncate\" a Monoid to its `mempty` value based on a condition.\n","hashAnchor":"v","info":{"tag":"value","value":{"tag":"ForAll","annotation":null,"contents":{"visibility":"TypeVarInvisible","identifier":"m","kind":null,"type":{"tag":"ConstrainedType","annotation":null,"contents":[{"constraintAnn":null,"constraintArgs":[{"tag":"TypeVar","annotation":null,"contents":"m"}],"constraintClass":[["Data","Monoid"],"Monoid"],"constraintData":null,"constraintKindArgs":[]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Boolean"]}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeVar","annotation":null,"contents":"m"}]},{"tag":"TypeVar","annotation":null,"contents":"m"}]}]}]},"skolem":null}}},"moduleName":"Data.Monoid","name":"guard","packageInfo":{"tag":"package","value":"prelude-6.0.1"},"score":0,"sourceSpan":{"end":{"column":49,"line":96},"name":".spago/p/prelude-6.0.1/src/Data/Monoid.purs","start":{"column":1,"line":96}}},{"comments":"Fail using `Plus` if a condition does not hold, or\nsucceed using `Applicative` if it does.\n\nFor example:\n\n```purescript\nimport Prelude\nimport Control.Alternative (guard)\nimport Data.Array ((..))\n\nfactors :: Int -> Array Int\nfactors n = do\n  a <- 1..n\n  b <- 1..n\n  guard $ a * b == n\n  pure a\n```\n","hashAnchor":"v","info":{"tag":"value","value":{"tag":"ForAll","annotation":null,"contents":{"visibility":"TypeVarInvisible","identifier":"m","kind":null,"type":{"tag":"ConstrainedType","annotation":null,"contents":[{"constraintAnn":null,"constraintArgs":[{"tag":"TypeVar","annotation":null,"contents":"m"}],"constraintClass":[["Control","Alternative"],"Alternative"],"constraintData":null,"constraintKindArgs":[]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Boolean"]}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeVar","annotation":null,"contents":"m"},{"tag":"TypeConstructor","annotation":null,"contents":[["Data","Unit"],"Unit"]}]}]}]},"skolem":null}}},"moduleName":"Control.Alternative","name":"guard","packageInfo":{"tag":"package","value":"control-6.0.0"},"score":0,"sourceSpan":{"end":{"column":54,"line":48},"name":".spago/p/control-6.0.0/src/Control/Alternative.purs","start":{"column":1,"line":48}}}]],["cycle",[{"comments":"Create a list by repeating another list\n","hashAnchor":"v","info":{"tag":"value","value":{"tag":"ForAll","annotation":null,"contents":{"visibility":"TypeVarInvisible","identifier":"a","kind":null,"type":{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Prim"],"Function"]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Data","List","Lazy","Types"],"List"]},{"tag":"TypeVar","annotation":null,"contents":"a"}]}]},{"tag":"TypeApp","annotation":null,"contents":[{"tag":"TypeConstructor","annotation":null,"contents":[["Data","List","Lazy","Types"],"List"]},{"tag":"TypeVar","annotation":null,"contents":"a"}]}]},"skolem":null}}},"moduleName":"Data.List.Lazy","name":"cycle","packageInfo":{"tag":"package","value":"lists-7.0.0"},"score":0,"sourceSpan":{"end":{"column":36,"line":196},"name":".spago/p/lists-7.0.0/src/Data/List/Lazy.purs","start":{"column":1,"line":196}}}]],["<<$>>",[{"comments":"A convenience operator which can be used to apply the result of `bipure` in\nthe style of `Applicative`:\n\n```purescript\nbipure f g <<$>> x <<*>> y\n```\n","hashAnchor":"v","info":{"tag":"valueAlias"},"moduleName":"Control.Biapply","name":"(<<$>>)","packageInfo":{"tag":"package","value":"bifunctors-6.0.0"},"score":0,"sourceSpan":{"end":{"column":27,"line":14},"name":".spago/p/bifunctors-6.0.0/src/Control/Biapply.purs","start":{"column":1,"line":14}}}]],["<<*",[{"hashAnchor":"v","info":{"tag":"valueAlias"},"moduleName":"Control.Biapply","name":"(<<*)","packageInfo":{"tag":"package","value":"bifunctors-6.0.0"},"score":0,"sourceSpan":{"end":{"column":30,"line":33},"name":".spago/p/bifunctors-6.0.0/src/Control/Biapply.purs","start":{"column":1,"line":33}}}]],["<<*>>",[{"hashAnchor":"v","info":{"tag":"valueAlias"},"moduleName":"Control.Biapply","name":"(<<*>>)","packageInfo":{"tag":"package","value":"bifunctors-6.0.0"},"score":0,"sourceSpan":{"end":{"column":26,"line":21},"name":".spago/p/bifunctors-6.0.0/src/Control/Biapply.purs","start":{"column":1,"line":21}}}]],["<<<",[{"hashAnchor":"v","info":{"tag":"valueAlias"},"moduleName":"Control.Semigroupoid","name":"(<<<)","packageInfo":{"tag":"package","value":"prelude-6.0.1"},"score":0,"sourceSpan":{"end":{"column":24,"line":19},"name":".spago/p/prelude-6.0.1/src/Control/Semigroupoid.purs","start":{"column":1,"line":19}}}]],["<<=",[{"hashAnchor":"v","info":{"tag":"valueAlias"},"moduleName":"Control.Extend","name":"(<<=)","packageInfo":{"tag":"package","value":"control-6.0.0"},"score":0,"sourceSpan":{"end":{"column":23,"line":35},"name":".spago/p/control-6.0.0/src/Control/Extend.purs","start":{"column":1,"line":35}}}]],[".|.",[{"hashAnchor":"v","info":{"tag":"valueAlias"},"moduleName":"Data.Int.Bits","name":"(.|.)","packageInfo":{"tag":"package","value":"integers-6.0.0"},"score":0,"sourceSpan":{"end":{"column":20,"line":20},"name":".spago/p/integers-6.0.0/src/Data/Int/Bits.purs","start":{"column":1,"line":20}}}]]]